{"version":3,"file":"index.cjs.js","sources":["../../src/constants/apiPaths.ts","../../src/constants/index.ts","../../src/httpClient/helpers/createFetchLogger.ts","../../src/httpClient/helpers/getClientSessionId.ts","../../src/httpClient/types.ts","../../src/httpClient/urlBuilder.ts","../../src/httpClient/utils.ts","../../src/httpClient/index.ts","../../src/httpClient/helpers/index.ts","../../src/constants/httpStatusCodes.ts","../../src/sdk/helpers/index.ts","../../src/sdk/validations/core.ts","../../src/sdk/validations/validators.ts","../../src/sdk/validations/index.ts","../../src/sdk/accesskey.ts","../../src/utils/utils.ts","../../src/sdk/types.ts","../../src/sdk/enchantedLink/validations.ts","../../src/sdk/enchantedLink/index.ts","../../src/sdk/flow/index.ts","../../src/sdk/magicLink/validations.ts","../../src/sdk/magicLink/index.ts","../../src/sdk/oauth/types.ts","../../src/sdk/oauth/index.ts","../../src/sdk/outbound/validations.ts","../../src/sdk/outbound/index.ts","../../src/sdk/otp/index.ts","../../src/sdk/saml.ts","../../src/sdk/totp.ts","../../src/sdk/password/validations.ts","../../src/sdk/password/index.ts","../../src/sdk/webauthn.ts","../../src/sdk/notp/index.ts","../../src/sdk/index.ts","../../src/createSdk.ts","../../src/index.ts","../../src/utils/wrapWith/index.ts"],"sourcesContent":["/** API paths for the Descope service APIs */\nexport default {\n  accessKey: {\n    exchange: '/v1/auth/accesskey/exchange',\n  },\n  otp: {\n    verify: '/v1/auth/otp/verify',\n    signIn: '/v1/auth/otp/signin',\n    signUp: '/v1/auth/otp/signup',\n    update: {\n      email: '/v1/auth/otp/update/email',\n      phone: '/v1/auth/otp/update/phone',\n    },\n    signUpOrIn: '/v1/auth/otp/signup-in',\n  },\n  magicLink: {\n    verify: '/v1/auth/magiclink/verify',\n    signIn: '/v1/auth/magiclink/signin',\n    signUp: '/v1/auth/magiclink/signup',\n    update: {\n      email: '/v1/auth/magiclink/update/email',\n      phone: '/v1/auth/magiclink/update/phone',\n    },\n    signUpOrIn: '/v1/auth/magiclink/signup-in',\n  },\n  enchantedLink: {\n    verify: '/v1/auth/enchantedlink/verify',\n    signIn: '/v1/auth/enchantedlink/signin',\n    signUp: '/v1/auth/enchantedlink/signup',\n    session: '/v1/auth/enchantedlink/pending-session',\n    update: {\n      email: '/v1/auth/enchantedlink/update/email',\n    },\n    signUpOrIn: '/v1/auth/enchantedlink/signup-in',\n  },\n  oauth: {\n    start: '/v1/auth/oauth/authorize',\n    exchange: '/v1/auth/oauth/exchange',\n    startNative: 'v1/auth/oauth/native/start',\n    finishNative: 'v1/auth/oauth/native/finish',\n    oneTap: {\n      getOneTapClientId: '/v1/auth/onetap/clientid/{provider}',\n      exchangeOneTapIDToken: '/v1/auth/onetap/idtoken/exchange',\n      verifyOneTapIDToken: '/v1/auth/onetap/idtoken/verify',\n    },\n  },\n  outbound: {\n    connect: '/v1/outbound/oauth/connect',\n  },\n  saml: {\n    start: '/v1/auth/saml/authorize',\n    exchange: '/v1/auth/saml/exchange',\n  },\n  totp: {\n    verify: '/v1/auth/totp/verify',\n    signUp: '/v1/auth/totp/signup',\n    update: '/v1/auth/totp/update',\n  },\n  notp: {\n    signIn: '/v1/auth/notp/whatsapp/signin',\n    signUp: '/v1/auth/notp/whatsapp/signup',\n    signUpOrIn: '/v1/auth/notp/whatsapp/signup-in',\n    session: '/v1/auth/notp/pending-session',\n  },\n  webauthn: {\n    signUp: {\n      start: '/v1/auth/webauthn/signup/start',\n      finish: '/v1/auth/webauthn/signup/finish',\n    },\n    signIn: {\n      start: '/v1/auth/webauthn/signin/start',\n      finish: '/v1/auth/webauthn/signin/finish',\n    },\n    signUpOrIn: {\n      start: '/v1/auth/webauthn/signup-in/start',\n    },\n    update: {\n      start: 'v1/auth/webauthn/update/start',\n      finish: '/v1/auth/webauthn/update/finish',\n    },\n  },\n  password: {\n    signUp: '/v1/auth/password/signup',\n    signIn: '/v1/auth/password/signin',\n    sendReset: '/v1/auth/password/reset',\n    update: '/v1/auth/password/update',\n    replace: '/v1/auth/password/replace',\n    policy: '/v1/auth/password/policy',\n  },\n  refresh: '/v1/auth/refresh',\n  selectTenant: '/v1/auth/tenant/select',\n  logout: '/v1/auth/logout',\n  logoutAll: '/v1/auth/logoutall',\n  me: '/v1/auth/me',\n  myTenants: '/v1/auth/me/tenants',\n  history: '/v1/auth/me/history',\n  flow: {\n    start: '/v1/flow/start',\n    next: '/v1/flow/next',\n  },\n};\n","/** Default Descope API URL */\nexport const BASE_URL_REGION_PLACEHOLDER = '<region>';\nexport const DEFAULT_BASE_API_URL = `https://api.${BASE_URL_REGION_PLACEHOLDER}descope.com`;\n\n/** Default magic link polling interval for checking if the user clicked on the magic-link/enchanted-link/notp */\nexport const MIN_POLLING_INTERVAL_MS = 1000; // 1 second\n/** Default maximum time we are willing to wait for the magic-link/enchanted-link/notp to be clicked */\nexport const MAX_POLLING_TIMEOUT_MS = 1000 * 60 * 10; // 10 minutes\n\n/**  Descope current tenant claim */\nexport const DESCOPE_CURRENT_TENANT_CLAIM = 'dct';\n\n/** API paths to the Descope service */\nexport { default as apiPaths } from './apiPaths';\n","import { Logger } from '../../sdk/types';\nimport { Fetch } from '../types';\n\n/** Build a log message around HTTP calls  */\nconst httpLogBuilder = () => {\n  const msg: {\n    Title?: string;\n    Url?: string;\n    Method?: string;\n    Headers?: string;\n    Body?: string;\n    Status?: string;\n  } = {};\n\n  return {\n    headers(headers: HeadersInit) {\n      const headersObj =\n        typeof headers.entries === 'function'\n          ? Object.fromEntries(headers.entries())\n          : headers;\n      msg.Headers = JSON.stringify(headersObj);\n\n      return this;\n    },\n\n    body(body: string) {\n      msg.Body = body;\n      return this;\n    },\n\n    url(url: URL | string) {\n      msg.Url = url.toString();\n      return this;\n    },\n\n    method(method: string) {\n      msg.Method = method;\n      return this;\n    },\n\n    title(title: string) {\n      msg.Title = title;\n      return this;\n    },\n\n    status(status: string) {\n      msg.Status = status;\n      return this;\n    },\n\n    build() {\n      return Object.keys(msg)\n        .flatMap((key) =>\n          msg[key] ? [`${key !== 'Title' ? `${key}: ` : ''}${msg[key]}`] : [],\n        )\n        .join('\\n');\n    },\n  };\n};\n\n/** Log the request object */\nconst buildRequestLog = (args: Parameters<Fetch>) =>\n  httpLogBuilder()\n    .title('Request')\n    .url(args[0])\n    .method(args[1].method)\n    .headers(args[1].headers)\n    .body(args[1].body)\n    .build();\n\n/** Log the response object */\nconst buildResponseLog = async (resp: Response) => {\n  const respBody = await resp.text();\n\n  return httpLogBuilder()\n    .title('Response')\n    .url(resp.url.toString())\n    .status(`${resp.status} ${resp.statusText}`)\n    .headers(resp.headers)\n    .body(respBody)\n    .build();\n};\n\nconst fetchWrapper =\n  (fetch: Fetch) =>\n  async (...args: Parameters<Fetch>) => {\n    const resp = await fetch(...args);\n\n    // we found out that cloning the response is problematic when using node fetch\n    // so instead, we are reading the body stream once and overriding the clone, text & json functions\n    const respText = await resp.text();\n\n    resp.text = () => Promise.resolve(respText);\n    resp.json = () => Promise.resolve(JSON.parse(respText));\n    resp.clone = () => resp;\n\n    return resp;\n  };\n\n/**\n * Create a fetch with a logger wrapped around it if a logger is given\n * @param logger Logger to send the logs to\n * @param receivedFetch Fetch to be used or built-in fetch if not provided\n *\n */\nconst createFetchLogger = (logger: Logger, receivedFetch?: Fetch) => {\n  const fetchInternal = fetchWrapper(receivedFetch || fetch);\n  if (!fetchInternal)\n    // eslint-disable-next-line no-console\n    logger?.warn(\n      'Fetch is not defined, you will not be able to send http requests, if you are running in a test, make sure fetch is defined globally',\n    );\n\n  if (!logger) return fetchInternal;\n  return async (...args: Parameters<Fetch>) => {\n    if (!fetchInternal)\n      throw Error(\n        'Cannot send http request, fetch is not defined, if you are running in a test, make sure fetch is defined globally',\n      );\n    logger.log(buildRequestLog(args));\n    const resp = await fetchInternal(...args);\n\n    logger[resp.ok ? 'log' : 'error'](await buildResponseLog(resp));\n\n    return resp;\n  };\n};\n\nexport default createFetchLogger;\n","let sessionId: string;\n\nexport const getClientSessionId = (): string => {\n  if (sessionId) {\n    return sessionId;\n  }\n  const currentDate = new Date();\n  const utcString = `${currentDate.getUTCFullYear().toString()}-${(\n    currentDate.getUTCMonth() + 1\n  )\n    .toString()\n    .padStart(2, '0')}-${currentDate\n    .getUTCDate()\n    .toString()\n    .padStart(2, '0')}-${currentDate\n    .getUTCHours()\n    .toString()\n    .padStart(2, '0')}:${currentDate\n    .getUTCMinutes()\n    .toString()\n    .padStart(2, '0')}:${currentDate\n    .getUTCSeconds()\n    .toString()\n    .padStart(2, '0')}:${currentDate.getUTCMilliseconds().toString()}`;\n  const randomSuffix = Math.floor(1000 + Math.random() * 9000);\n  sessionId = `${utcString}-${randomSuffix}`;\n  return sessionId;\n};\n","import { Logger } from '../sdk/types';\n\n/** Request configuration including headers, query params and token */\ntype HttpClientReqConfig = {\n  headers?: HeadersInit;\n  queryParams?: { [key: string]: string };\n  token?: string;\n};\n\nexport type ExtendedResponse = Response & { cookies: Record<string, string> };\n\n/** HTTP methods we use in the client */\nexport enum HTTPMethods {\n  get = 'GET',\n  delete = 'DELETE',\n  post = 'POST',\n  put = 'PUT',\n  patch = 'PATCH',\n}\n\n/** HTTP Client type that implements the HTTP method calls. Descopers can provide their own HTTP client although required only in rare cases. */\nexport type HttpClient = {\n  get: (path: string, config?: HttpClientReqConfig) => Promise<Response>;\n  post: (\n    path: string,\n    body?: any,\n    config?: HttpClientReqConfig,\n  ) => Promise<Response>;\n  patch: (\n    path: string,\n    body?: any,\n    config?: HttpClientReqConfig,\n  ) => Promise<Response>;\n  put: (\n    path: string,\n    body?: any,\n    config?: HttpClientReqConfig,\n  ) => Promise<Response>;\n  delete: (path: string, config?: HttpClientReqConfig) => Promise<Response>;\n  hooks?: Hooks;\n  buildUrl: (path: string, queryParams?: { [key: string]: string }) => string;\n};\n\nexport type Fetch = typeof fetch;\n\n/** Parameters for the HTTP client. Defaults should work for most cases. */\nexport type CreateHttpClientConfig = {\n  baseUrl: string;\n  projectId: string;\n  baseConfig?: { baseHeaders: HeadersInit };\n  logger?: Logger;\n  hooks?: Hooks;\n  cookiePolicy?: RequestCredentials | null;\n  refreshCookieName?: string;\n  fetch?: Fetch;\n};\n\n/** For before-request hook allows overriding parts of the request */\nexport type RequestConfig = {\n  path: string;\n  headers?: HeadersInit;\n  queryParams?: { [key: string]: string };\n  body?: any;\n  method: HTTPMethods;\n  token?: string;\n};\n\nexport type BeforeRequest = (config: RequestConfig) => RequestConfig;\n\nexport type AfterRequest = (\n  req: RequestConfig,\n  res: Response,\n) => void | Promise<void>;\n\n/** Hooks before and after the request is made */\nexport type Hooks = {\n  beforeRequest?: BeforeRequest;\n  afterRequest?: AfterRequest;\n  transformResponse?: (\n    mutableResponse: ExtendedResponse,\n  ) => Promise<ExtendedResponse>;\n};\n","import { BASE_URL_REGION_PLACEHOLDER } from '../constants';\n\n/** Build URL with given parts */\nexport const urlBuilder = ({\n  path,\n  baseUrl,\n  queryParams,\n  projectId,\n}: {\n  path: string;\n  baseUrl: string;\n  queryParams?: { [key: string]: string };\n  projectId: string;\n}) => {\n  // NOTE: many URL and URLSearchParams functions and fields are NOT SUPPORTED by the react-native runtime.\n  // To add insult to injury - it adds a trailing slash almost no matter what the input is:\n  // https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Blob/URL.js#L144\n  // Do not replace unless testing with all of the core-dependent projects\n  const region = projectId.slice(1, -27);\n  baseUrl = baseUrl.replace(\n    BASE_URL_REGION_PLACEHOLDER,\n    region ? region + '.' : '',\n  );\n  // append path to base\n  let url = path\n    ? `${baseUrl.replace(/\\/$/, '')}/${path?.replace(/^\\//, '')}`\n    : baseUrl;\n\n  // add query params if given\n  if (queryParams) {\n    const keys = Object.keys(queryParams);\n    keys.forEach((key: string, index: number) => {\n      url = `${url}${index === 0 ? '?' : ''}${key}=${encodeURIComponent(\n        queryParams[key],\n      )}${index === keys.length - 1 ? '' : '&'}`;\n    });\n  }\n\n  return url;\n};\n","/* eslint-disable no-nested-ternary */\n\nconst getSrcArr = (source: HeadersInit) => {\n  if (Array.isArray(source)) return source;\n  if (source instanceof Headers) return Array.from(source.entries());\n  if (!source) return [];\n  return Object.entries(source);\n};\n\n/** Merge the given list of headers into a single Headers object */\nexport const mergeHeaders = (...sources: HeadersInit[]) =>\n  new Headers(\n    sources.reduce((acc: Record<string, string>, source) => {\n      const srcArr = getSrcArr(source);\n      srcArr.reduce((_, [key, value]) => {\n        acc[key] = value;\n\n        return acc;\n      }, acc);\n\n      return acc;\n    }, {}),\n  );\n\n/** Serialize the body to JSON */\nexport const serializeBody = (body: Record<string, any>) =>\n  body === undefined ? undefined : JSON.stringify(body);\n","import { getClientSessionId, transformSetCookie } from './helpers';\nimport createFetchLogger from './helpers/createFetchLogger';\nimport {\n  CreateHttpClientConfig,\n  HttpClient,\n  HTTPMethods,\n  RequestConfig,\n} from './types';\nimport { urlBuilder } from './urlBuilder';\nimport { mergeHeaders, serializeBody } from './utils';\n\nconst jsonHeaders = {\n  'Content-Type': 'application/json',\n};\n\n/**\n * Create a Bearer authorization header with concatenated projectId and token\n * @param projectId The project id to use in the header\n * @param token Token to be concatenated. Defaults to empty.\n */\nconst createAuthorizationHeader = (projectId: string, token = '') => {\n  let bearer = projectId;\n  if (token) {\n    bearer = bearer + ':' + token;\n  }\n  return {\n    Authorization: `Bearer ${bearer}`,\n  };\n};\n\ndeclare const BUILD_VERSION: string;\n\n/**\n * Create descope custom headers\n */\nconst createDescopeHeaders = (\n  projectId: string,\n  refreshCookieName?: string,\n) => {\n  const res = {\n    'x-descope-sdk-session-id': getClientSessionId(),\n    'x-descope-sdk-name': 'core-js',\n    'x-descope-sdk-version': BUILD_VERSION,\n    'x-descope-project-id': projectId,\n  };\n\n  if (refreshCookieName) {\n    res['x-descope-refresh-cookie-name'] = refreshCookieName;\n  }\n  return res;\n};\n\nconst isJson = (value?: string) => {\n  try {\n    value = JSON.parse(value);\n  } catch (e) {\n    return false;\n  }\n\n  return typeof value === 'object' && value !== null;\n};\n\n/**\n * Create the HTTP client used to send HTTP requests to the Descope API\n *\n * @param CreateHttpClientConfig Configuration for the client\n */\nconst createHttpClient = ({\n  baseUrl,\n  projectId,\n  baseConfig,\n  refreshCookieName,\n  logger,\n  hooks,\n  cookiePolicy,\n  fetch,\n}: CreateHttpClientConfig): HttpClient => {\n  const fetchWithLogger = createFetchLogger(logger, fetch);\n\n  const sendRequest = async (config: RequestConfig) => {\n    const requestConfig = hooks?.beforeRequest\n      ? hooks.beforeRequest(config)\n      : config;\n\n    const { path, body, headers, queryParams, method, token } = requestConfig;\n\n    const serializedBody = serializeBody(body);\n    const requestInit: RequestInit = {\n      headers: mergeHeaders(\n        createAuthorizationHeader(projectId, token),\n        createDescopeHeaders(projectId, refreshCookieName),\n        baseConfig?.baseHeaders || {},\n        isJson(serializedBody) ? jsonHeaders : {}, // add json content headers if body is json\n        headers,\n      ),\n      method,\n      body: serializedBody,\n    };\n\n    // On edge runtimes like Cloudflare, the fetch implementation does not support credentials\n    // so we allow the caller to omit by specifying null\n    // See https://github.com/cloudflare/workerd/blob/main/src/workerd/api/http.h#L591\n    if (cookiePolicy !== null) {\n      requestInit.credentials = cookiePolicy || 'include';\n    }\n\n    const res = await fetchWithLogger(\n      urlBuilder({ path, baseUrl, queryParams, projectId }),\n      requestInit,\n    );\n\n    if (hooks?.afterRequest) {\n      await hooks.afterRequest(config, res?.clone());\n    }\n\n    if (hooks?.transformResponse) {\n      const json = await res.json();\n      const cookies = transformSetCookie(res.headers?.get('set-cookie') || '');\n      const mutableResponse = {\n        ...res,\n        json: () => Promise.resolve(json),\n        cookies,\n      };\n      // we want to make sure cloning the response will keep the transformed json data\n      mutableResponse.clone = () => mutableResponse;\n      return hooks.transformResponse(mutableResponse);\n    }\n\n    return res;\n  };\n\n  return {\n    get: (path: string, { headers, queryParams, token } = {}) =>\n      sendRequest({\n        path,\n        headers,\n        queryParams,\n        body: undefined,\n        method: HTTPMethods.get,\n        token,\n      }),\n    post: (path, body, { headers, queryParams, token } = {}) =>\n      sendRequest({\n        path,\n        headers,\n        queryParams,\n        body,\n        method: HTTPMethods.post,\n        token,\n      }),\n    patch: (path, body, { headers, queryParams, token } = {}) =>\n      sendRequest({\n        path,\n        headers,\n        queryParams,\n        body,\n        method: HTTPMethods.patch,\n        token,\n      }),\n    put: (path, body, { headers, queryParams, token } = {}) =>\n      sendRequest({\n        path,\n        headers,\n        queryParams,\n        body,\n        method: HTTPMethods.put,\n        token,\n      }),\n    delete: (path, { headers, queryParams, token } = {}) =>\n      sendRequest({\n        path,\n        headers,\n        queryParams,\n        body: undefined,\n        method: HTTPMethods.delete,\n        token,\n      }),\n    hooks,\n    buildUrl: (path, queryParams) => {\n      return urlBuilder({ projectId, baseUrl, path, queryParams });\n    },\n  };\n};\n\nexport default createHttpClient;\nexport type { HttpClient };\n","export { default as createFetchLogger } from './createFetchLogger';\nexport { getClientSessionId } from './getClientSessionId';\n\nexport function transformSetCookie(setCookieHeader: string) {\n  // Split the header by semicolons to separate different attributes\n  var cookiesString = setCookieHeader.split(';');\n\n  return cookiesString.reduce((acc, cookie) => {\n    const [key, value] = cookie.split('=');\n    return {\n      ...acc,\n      [key.trim()]: value,\n    };\n  }, {});\n}\n","export default {\n  TOO_MANY_REQUESTS: 429,\n};\n","import { jwtDecode, JwtPayload } from 'jwt-decode';\nimport { ResponseData, SdkResponse } from '../types';\nimport HttpStatusCodes from '../../constants/httpStatusCodes';\nimport { DESCOPE_CURRENT_TENANT_CLAIM } from '../../constants';\n\nfunction getJwtAuthorizationItems(\n  token: string,\n  tenant: string,\n  claim: string,\n): string[] {\n  let claims: any = parseJwt(token);\n  if (tenant) {\n    if (!claims?.tenants && claims?.[DESCOPE_CURRENT_TENANT_CLAIM] === tenant) {\n      // The token may have the current tenant in the \"dct\" claim and without the \"tenants\" claim\n      return claims?.[claim] || [];\n    } else {\n      claims = claims?.tenants?.[tenant];\n    }\n  }\n  const items = claims?.[claim];\n  return Array.isArray(items) ? items : [];\n}\n\nfunction parseJwt(token: string): JwtPayload {\n  if (typeof token !== 'string' || !token)\n    throw new Error('Invalid token provided');\n  return jwtDecode(token);\n}\n\n/**\n * Checks if the given JWT is still valid but DOES NOT check for signature\n *\n * @param token JWT token\n */\nexport function isJwtExpired(token: string): boolean {\n  const { exp } = parseJwt(token);\n  const currentTime = new Date().getTime() / 1000;\n  return currentTime > exp;\n}\n\n/**\n * Returns the list of tenants in the given JWT\n *\n * @param token JWT token\n */\nexport function getTenants(token: string): string[] {\n  let claims: any = parseJwt(token);\n  const items = Object.keys(claims?.tenants);\n  return Array.isArray(items) ? items : [];\n}\n\n/**\n * Returns the list of permissions granted in the given JWT but DOES NOT check for signature\n *\n * @param token JWT token\n */\nexport function getJwtPermissions(token: string, tenant?: string): string[] {\n  return getJwtAuthorizationItems(token, tenant, 'permissions');\n}\n\n/**\n * Returns the list of roles specified in the given JWT but DOES NOT check for signature\n *\n * @param token JWT token\n */\nexport function getJwtRoles(token: string, tenant?: string): string[] {\n  return getJwtAuthorizationItems(token, tenant, 'roles');\n}\n\n/** Joins path parts making sure there is only one path separator between parts */\nexport const pathJoin = (...args: string[]) =>\n  args.join('/').replace(/\\/{2,}/g, '/');\n\n/** Transform the Promise Response to our internal SdkResponse implementation\n * @param response The Response promise from fetch\n * @param transform Optionally transform the response JSON to another type\n */\nexport async function transformResponse<\n  T extends ResponseData,\n  S extends ResponseData = T,\n>(\n  response: Promise<Response>,\n  transform?: (data: T) => S,\n): Promise<SdkResponse<S>> {\n  const resp = await response;\n\n  const ret: SdkResponse<S> = {\n    code: resp.status,\n    ok: resp.ok,\n    response: resp,\n  };\n\n  const data = await resp.clone().json();\n\n  if (!resp.ok) {\n    ret.error = data;\n\n    if (resp.status === HttpStatusCodes.TOO_MANY_REQUESTS) {\n      Object.assign(ret.error, {\n        retryAfter: Number.parseInt(resp.headers?.get('retry-after')) || 0,\n      });\n    }\n  } else if (transform) {\n    ret.data = transform(data);\n  } else {\n    ret.data = <S>data;\n  }\n\n  return ret;\n}\n\nexport function getCurrentTenant(token: string): string {\n  return parseJwt(token)?.[DESCOPE_CURRENT_TENANT_CLAIM] || '';\n}\n","import { Validator, ValidationRule, MakeValidator } from './types';\n\nexport const createValidator =\n  (rule: ValidationRule, defaultMsg?: string): MakeValidator =>\n  (msg = defaultMsg) =>\n  (val) =>\n    !rule(val) ? msg.replace('{val}', val) : false;\n\nexport const createOrValidator =\n  (validators: Validator[], defaultMsg?: string): MakeValidator =>\n  (msg = defaultMsg) =>\n  (val) => {\n    const errors = validators.filter((validator) => validator(val));\n\n    if (errors.length < validators.length) return false;\n\n    return msg ? msg.replace('{val}', val) : errors.join(' OR ');\n  };\n\nexport const createValidation = (...validators: Validator[]) => ({\n  validate: (val: any) => {\n    validators.forEach((validator) => {\n      const errMsg = validator(val);\n      if (errMsg) throw new Error(errMsg);\n    });\n\n    return true;\n  },\n});\n","import { createOrValidator, createValidation, createValidator } from './core';\nimport { Validator } from './types';\n\nconst regexMatch = (regex: RegExp) => (val: any) => regex.test(val);\n\nconst validateString = (val: any) => typeof val === 'string';\n\nconst validateArray = (val: any) => Array.isArray(val);\n\nconst validateBoolean = (val: any) => typeof val === 'boolean';\n\nconst validateUndefined = (val: any) => val === undefined;\n\nconst validateEmail = regexMatch(\n  /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\n);\n\n// A replacement for lodash.get, because it may not integrate well in various runtime environments (Edge).\n// Implementation is based on https://gist.github.com/dfkaye/59263b51cf1e0b633181c5f44ae2066a\nconst get = (object: any, pathName: string, defaultValue?: any) => {\n  // Coerce pathName to a string (even it turns into \"[object Object]\").\n  const path = Array.isArray(pathName) ? pathName.join('.') : String(pathName);\n\n  // Support bracket notation, e.g., \"a[0].b.c\".\n  const match = /\\[\\\\?(\"|')?(\\w|d)+\\\\?(\"|')?\\]/g;\n\n  const parts = path.replace(match, (m, i, v) => '.' + v).split('.');\n\n  const length = parts.length;\n  let i = 0;\n\n  // In case object isn't a real object, set it to undefined.\n  let value = object === Object(object) ? object : undefined;\n\n  while (value != null && i < length) {\n    value = value[parts[i++]];\n  }\n\n  /**\n   * returns the resolved value if\n   * 1. iteration happened (i > 0)\n   * 2. iteration completed (i === length)\n   * 3. the value at the path is found in the data structure (not undefined). Note that if the path is found but the\n   *    value is null, then null is returned.\n   * If any of those checks fails, return the defaultValue param, if provided.\n   */\n  return i && i === length && value !== undefined ? value : defaultValue;\n};\n\nconst validatePhone = regexMatch(/^\\+[1-9]{1}[0-9]{3,14}$/);\nconst validateMinLength = (min: number) => (val: any) => val.length >= min;\n// const validatePlainObject = (val: any) => !!val && Object.getPrototypeOf(val) === Object.prototype;\nconst validatePathValue = (path: string, rules: Validator[]) => (val: any) =>\n  createValidation(...rules).validate(get(val, path));\n\nexport const isEmail = createValidator(\n  validateEmail,\n  '\"{val}\" is not a valid email',\n);\nexport const isPhone = createValidator(\n  validatePhone,\n  '\"{val}\" is not a valid phone number',\n);\nexport const isNotEmpty = createValidator(\n  validateMinLength(1),\n  'Minimum length is 1',\n);\nexport const isString = createValidator(\n  validateString,\n  'Input is not a string',\n);\n\nexport const isArray = createValidator(validateArray, 'Input is not an array');\n\nexport const isBoolean = createValidator(\n  validateBoolean,\n  'Input is not a boolean',\n);\n\nexport const isUndefined = createValidator(\n  validateUndefined,\n  'Input is defined',\n);\n\nexport const isStringOrUndefined = createOrValidator(\n  [isString(), isUndefined()],\n  'Input is not a string or undefined',\n);\n\nexport const isArrayOrBool = createOrValidator(\n  [isArray(), isBoolean()],\n  'Input is not an array or boolean',\n);\n\n// export const isPlainObject = createValidator(validatePlainObject, 'Input is not a plain object');\nexport const hasPathValue = (path: string, rules: Validator[]) =>\n  createValidator(validatePathValue(path, rules))();\n","import { createValidation } from './core';\nimport { Validator } from './types';\nimport {\n  isEmail,\n  isNotEmpty,\n  isPhone,\n  isString,\n  isStringOrUndefined,\n} from './validators';\n\n/**\n *\n * Validate that all of the validators passes\n * @params each parameter is an array of validators, those validators will be verified against the wrapped function argument which in the same place\n * @throws if any of the validators fails, an error with the relevant message will be thrown\n */\nexport const withValidations =\n  (...argsRules: Validator[][]) =>\n  <T extends Array<any>, U>(fn: (...args: T) => U) =>\n  (...args: T): U => {\n    argsRules.forEach((rulesArr, i) =>\n      createValidation(...rulesArr).validate(args[i]),\n    );\n\n    return fn(...args);\n  };\n\nexport const string = (fieldName: string) => [\n  isString(`\"${fieldName}\" must be a string`),\n];\n\nexport const isStringOrUndefinedValidator = (fieldName: string) => [\n  isStringOrUndefined(`\"${fieldName}\" must be string or undefined`),\n];\n\nexport const stringNonEmpty = (fieldName: string) => [\n  isString(`\"${fieldName}\" must be a string`),\n  isNotEmpty(`\"${fieldName}\" must not be empty`),\n];\nexport const stringEmail = (fieldName: string) => [\n  isString(`\"${fieldName}\" must be a string`),\n  isEmail(),\n];\nexport const stringPhone = (fieldName: string) => [\n  isString(`\"${fieldName}\" must be a string`),\n  isPhone(),\n];\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport { transformResponse } from './helpers';\nimport {\n  AccessKeyLoginOptions,\n  ExchangeAccessKeyResponse,\n  SdkResponse,\n} from './types';\nimport { stringNonEmpty, withValidations } from './validations';\n\nconst withExchangeValidations = withValidations(stringNonEmpty('accessKey'));\n\nconst withAccessKeys = (httpClient: HttpClient) => ({\n  exchange: withExchangeValidations(\n    (\n      accessKey: string,\n      loginOptions?: AccessKeyLoginOptions,\n    ): Promise<SdkResponse<ExchangeAccessKeyResponse>> =>\n      transformResponse(\n        httpClient.post(\n          apiPaths.accessKey.exchange,\n          { loginOptions },\n          { token: accessKey },\n        ),\n      ),\n  ),\n});\n\nexport default withAccessKeys;\n","import { MAX_POLLING_TIMEOUT_MS, MIN_POLLING_INTERVAL_MS } from '../constants';\n\n/** Polling configuration with defaults and normalizing checks */\nexport const normalizeWaitForSessionConfig = ({\n  pollingIntervalMs = MIN_POLLING_INTERVAL_MS,\n  timeoutMs = MAX_POLLING_TIMEOUT_MS,\n} = {}) => ({\n  pollingIntervalMs: Math.max(\n    pollingIntervalMs || MIN_POLLING_INTERVAL_MS,\n    MIN_POLLING_INTERVAL_MS,\n  ),\n  timeoutMs: Math.min(\n    timeoutMs || MAX_POLLING_TIMEOUT_MS,\n    MAX_POLLING_TIMEOUT_MS,\n  ),\n});\n","type DeviceInfo = {\n  webAuthnSupport?: boolean;\n};\n\ntype LastAuth = {\n  authMethod?: AuthMethod;\n  oauthProvider?: string;\n  name?: string;\n  loginId?: string;\n};\n\ntype RedirectAuth = {\n  callbackUrl: string;\n  codeChallenge: string;\n};\n\n/** Sent in a flow start request when running as a native flow component via a mobile SDK */\ntype NativeOptions = {\n  /** What mobile platform we're running on, used to decide between different behaviors on the backend */\n  platform: 'ios' | 'android';\n\n  /** The name of an OAuth provider that will use native OAuth (Sign in with Apple/Google) instead of web OAuth when running in a mobile app */\n  oauthProvider?: string;\n\n  /** An override for web OAuth that sets the address to redirect to after authentication succeeds at the OAuth provider website */\n  oauthRedirect?: string;\n};\n\ntype AuthMethod =\n  | 'magiclink'\n  | 'enchantedlink'\n  | 'otp'\n  | 'totp'\n  | 'oauth'\n  | 'saml'\n  | 'webauthn';\n\nexport type SdkFn = (...args: any[]) => Promise<SdkResponse<ResponseData>>;\n\nexport type MaskedPhone = {\n  maskedPhone: string;\n};\n\nexport type MaskedEmail = {\n  maskedEmail: string;\n};\n\n/** User base details from Descope API */\nexport type User = {\n  email?: string;\n  name?: string;\n  givenName?: string;\n  middleName?: string;\n  familyName?: string;\n  phone?: string;\n};\n\n/** User extended details from Descope API */\nexport type UserResponse = User & {\n  loginIds: string[];\n  userId: string;\n  verifiedEmail?: boolean;\n  verifiedPhone?: boolean;\n  picture?: string;\n  roleNames?: string[];\n  userTenants?: UserTenant[];\n  createdTime: number;\n  TOTP: boolean;\n  SAML: boolean;\n  SCIM: boolean;\n  password: boolean;\n  OAuth?: Record<string, boolean>;\n  customAttributes?: Record<string, any>;\n  status: string;\n};\n\nexport type Tenant = {\n  id: string;\n  name: string;\n  customAttributes?: Record<string, any>;\n};\n\nexport type TenantsResponse = {\n  tenants: Tenant[];\n};\n\nexport type UserHistoryResponse = {\n  userId: string;\n  loginTime: number;\n  city: string;\n  country: string;\n  ip: string;\n};\n\n/** A tenant association mapping  */\nexport type UserTenant = {\n  tenantId: string;\n  roleNames?: string[];\n  tenantName: string;\n};\n\nexport type TemplateOptions = Record<string, string>; // for providing messaging template options (templates that are being sent via email / text message)\n\n/** Login options to be added to the different authentication methods */\nexport type LoginOptions = {\n  stepup?: boolean;\n  mfa?: boolean;\n  revokeOtherSessions?: boolean;\n  customClaims?: Record<string, any>;\n  templateId?: string;\n  templateOptions?: TemplateOptions;\n};\n\n/** Access key login options to be added to the different authentication methods */\nexport type AccessKeyLoginOptions = {\n  customClaims?: Record<string, any>;\n};\n\n/** Sign Up options to be added to the different authentication methods */\nexport type SignUpOptions = {\n  customClaims?: Record<string, any>;\n  templateId?: string;\n  templateOptions?: TemplateOptions;\n};\n\n/** Authentication info result from the various JWT validations  */\nexport type JWTResponse = {\n  sessionJwt: string;\n  refreshJwt?: string;\n  cookieDomain?: string;\n  cookiePath?: string;\n  cookieMaxAge?: number;\n  cookieExpiration?: number;\n  user?: UserResponse;\n  firstSeen?: boolean;\n  sessionExpiration: number;\n};\n\n/** Authentication info result from exchanging access keys for a session */\nexport type ExchangeAccessKeyResponse = {\n  keyId: string;\n  sessionJwt: string;\n  expiration: number;\n};\n\n/** Options for fine-grained passkey (WebAuthn) control */\nexport type PasskeyOptions = {\n  // attestation only (sign up)\n  authenticatorSelection?: WebauthnAuthenticatorSelectionCriteria;\n  attestation?: 'none' | 'indirect' | 'direct';\n  // assertion only (sign in)\n  userVerification?: 'preferred' | 'required' | 'discouraged';\n  // shared\n  extensionsJSON?: string;\n};\n\n/** Part of the passkey options that apply when performing attestation (sign up) */\nexport type WebauthnAuthenticatorSelectionCriteria = {\n  authenticatorAttachment?: 'any' | 'platform' | 'crossplatform';\n  residentKey?: 'discouraged' | 'preferred' | 'required';\n  userVerification?: 'preferred' | 'required' | 'discouraged';\n};\n\n/** The response returned from the various start webauthn functions */\nexport type WebAuthnStartResponse = {\n  transactionId: string;\n  options: string;\n  create: boolean;\n};\n\n/** Enchanted link response */\nexport type EnchantedLinkResponse = {\n  /** Pending reference URL to poll while waiting for user to click magic link */\n  pendingRef: string;\n  /** Link id, on which link the user should click */\n  linkId: string;\n  /** Email to which the link was sent to */\n  maskedEmail: string;\n};\n\n/** URL response to redirect user in case of OAuth or SSO */\nexport type URLResponse = {\n  url: string;\n};\n\n/** TOTP response with the TOTP details */\nexport type TOTPResponse = {\n  provisioningURL: string;\n  image: string;\n  key: string;\n};\n\n/** Password reset response with details according to response method */\nexport type PasswordResetResponse = {\n  resetMethod: string;\n  pendingRef?: string;\n  linkId?: string;\n  maskedEmail: string;\n};\n\n/** A subset of the password policy that can be checked on the client side for better UX */\nexport type PasswordPolicyResponse = {\n  minLength: number;\n  lowercase: boolean;\n  uppercase: boolean;\n  number: boolean;\n  nonAlphanumeric: boolean;\n};\n\nexport type ClientIdResponse = {\n  clientId: string;\n};\n\nexport type VerifyOneTapIDTokenResponse = {\n  code: string;\n};\n\n/** Phone delivery methods which are currently supported */\nexport enum DeliveryPhone {\n  sms = 'sms',\n  voice = 'voice',\n  whatsapp = 'whatsapp',\n}\n\nexport enum DeliveryEmail {\n  email = 'email',\n}\n\n/** All delivery methods currently supported */\nexport type DeliveryMethods = DeliveryPhone | DeliveryEmail;\n\nexport const DeliveryMethods = {\n  ...DeliveryPhone,\n  ...DeliveryEmail,\n} as const;\n\n/** All flow execution statuses\n *  - waiting - flow execution is waiting for user interaction\n *  - running - flow execution is currently running\n *  - completed - flow execution completed successfully\n *  - failed - flow execution failed\n */\nexport enum FlowStatus {\n  waiting = 'waiting',\n  running = 'running',\n  completed = 'completed',\n  failed = 'failed',\n}\n\n/** All flow response action\n *  - screen - next action is to render  screen\n *  - poll - next action is poll for next after timeout\n *  - redirect - next action is to redirect (redirection details in 'redirect' attribute)\n *  - webauthnCreate/webauthnGet - next action is to prompt webauthn (details in 'webauthn' attribute)\n *  - nativeBridge - the next action needs to be sent via the native bridge to the native layer\n *  - none - no next action\n */\nexport type FlowAction =\n  | 'screen'\n  | 'poll'\n  | 'redirect'\n  | 'webauthnCreate'\n  | 'webauthnGet'\n  | 'nativeBridge'\n  | 'none';\n\nexport type ComponentsConfig = Record<string, any>;\n\n/** Flow response with flow execution details */\nexport type FlowResponse = {\n  // current execution identifier\n  executionId: string;\n  // current step identifier\n  stepId: string;\n  // current step name\n  stepName: string;\n  // flow execution status\n  status: FlowStatus;\n  // the next required action\n  action: FlowAction;\n  // screen data - if action is 'screen'\n  screen?: {\n    // screen identifier\n    id: string;\n    // extra dynamic state required for rendering screen\n    state: Record<string, any>;\n    componentsConfig: ComponentsConfig;\n  };\n  // redirect data - if action is 'redirect'\n  redirect?: {\n    url: string;\n    isPopup?: boolean;\n  };\n  // SAML IDP response (this will be used to build the html form response goes from the IDP through the end user browser to the SP)\n  samlIdpResponse?: {\n    url: string;\n    samlResponse: string;\n    relayState: string;\n  };\n  // a URL to open in a new tab\n  openInNewTabUrl?: string;\n  // webauthn data - if action is one of 'webauthnCreate', 'webauthnGet'\n  webauthn?: {\n    transactionId: string;\n    options: string;\n    create: boolean;\n  };\n  // set if the action is 'nativeBridge'\n  nativeResponse?: {\n    type: 'oauthNative' | 'oauthWeb' | 'webauthnGet' | 'webauthnCreate';\n    payload: Record<string, any>;\n  };\n  // an error that occurred during flow execution, used for debugging / integrating\n  error?: {\n    code: string;\n    description: string;\n    message: string;\n  };\n  // authentication information response, if response is authenticated\n  authInfo?: JWTResponse;\n  lastAuth?: Pick<LastAuth, 'authMethod' | 'oauthProvider'>;\n  runnerLogs?: {\n    title?: string;\n    log: string;\n    level?: 'info' | 'debug' | 'warn' | 'error';\n  }[];\n};\n\nexport type Options = {\n  redirectUrl?: string;\n  location?: string;\n  tenant?: string;\n  deviceInfo?: DeviceInfo;\n  lastAuth?: LastAuth;\n  redirectAuth?: RedirectAuth;\n  oidcIdpStateId?: string;\n  preview?: boolean;\n  samlIdpStateId?: string;\n  samlIdpUsername?: string;\n  ssoAppId?: string;\n  thirdPartyAppId?: string;\n  oidcLoginHint?: string;\n  abTestingKey?: number;\n  startOptionsVersion?: number;\n  client?: Record<string, any>;\n  locale?: string;\n  oidcPrompt?: string;\n  oidcErrorRedirectUri?: string;\n  nativeOptions?: NativeOptions;\n  thirdPartyAppStateId?: string;\n  applicationScopes?: string; // Relevant for sso application and third party application\n  outboundAppId?: string;\n  outboundAppScopes?: string[];\n};\n\nexport type ResponseData = Record<string, any>;\n\n/**\n * Response from our SDK calls which includes the result (ok, code, error).\n * The relevant data is provided in the more specific interfaces extending SdkResponse.\n */\nexport type SdkResponse<T extends ResponseData> = {\n  code?: number;\n  ok: boolean;\n  response?: Response;\n  error?: {\n    errorCode: string;\n    errorDescription: string;\n    errorMessage?: string;\n    retryAfter?: string;\n  };\n  data?: T;\n};\n\n/** Different delivery method */\nexport type Deliveries<T extends Record<DeliveryMethods, SdkFn>> = {\n  [S in DeliveryMethods]: T[S];\n};\n\nexport type DeliveriesPhone<T extends Record<DeliveryPhone, SdkFn> | SdkFn> = {\n  [S in DeliveryPhone]: T extends Record<DeliveryPhone, SdkFn> ? T[S] : T;\n};\n\n/** Map different functions to email vs phone (sms, whatsapp, voice) */\nexport type DeliveriesMap<EmailFn extends SdkFn, PhoneFn extends SdkFn> = {\n  [S in DeliveryMethods]: S extends 'email' ? EmailFn : PhoneFn;\n};\n\n/** Logger type that supports the given levels (debug, log, error) */\nexport type Logger = Pick<Console, 'debug' | 'log' | 'error' | 'warn'>;\n\n/** Polling configuration for session waiting */\nexport type WaitForSessionConfig = {\n  pollingIntervalMs: number;\n  timeoutMs: number;\n};\n\nexport type UpdateOptions<T extends boolean> = {\n  addToLoginIDs?: T;\n  onMergeUseExisting?: T extends true ? boolean : never;\n  templateOptions?: TemplateOptions;\n  templateId?: string;\n  providerId?: string;\n};\n","import {\n  stringNonEmpty,\n  withValidations,\n  stringPhone,\n  stringEmail,\n} from '../validations';\n\nexport const loginIdValidations = stringNonEmpty('loginId');\nexport const withVerifyValidations = withValidations(stringNonEmpty('token'));\nexport const withSignValidations = withValidations(loginIdValidations);\nexport const withWaitForSessionValidations = withValidations(\n  stringNonEmpty('pendingRef'),\n);\nexport const withUpdatePhoneValidations = withValidations(\n  loginIdValidations,\n  stringPhone('phone'),\n);\nexport const withUpdateEmailValidations = withValidations(\n  loginIdValidations,\n  stringEmail('email'),\n);\n","import {\n  apiPaths,\n  MAX_POLLING_TIMEOUT_MS,\n  MIN_POLLING_INTERVAL_MS,\n} from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { normalizeWaitForSessionConfig } from '../../utils';\nimport { pathJoin, transformResponse } from '../helpers';\nimport {\n  DeliveryMethods,\n  SdkResponse,\n  JWTResponse,\n  EnchantedLinkResponse,\n  User,\n  LoginOptions,\n  UpdateOptions,\n  SignUpOptions,\n  WaitForSessionConfig,\n} from '../types';\nimport {\n  withWaitForSessionValidations,\n  withSignValidations,\n  withVerifyValidations,\n  withUpdateEmailValidations,\n} from './validations';\n\nconst withEnchantedLink = (httpClient: HttpClient) => ({\n  verify: withVerifyValidations(\n    (token: string): Promise<SdkResponse<never>> =>\n      transformResponse(\n        httpClient.post(apiPaths.enchantedLink.verify, { token }),\n      ),\n  ),\n\n  signIn: withSignValidations(\n    (\n      loginId: string,\n      URI?: string,\n      loginOptions?: LoginOptions,\n      token?: string,\n    ): Promise<SdkResponse<EnchantedLinkResponse>> =>\n      transformResponse(\n        httpClient.post(\n          pathJoin(apiPaths.enchantedLink.signIn, DeliveryMethods.email),\n          {\n            loginId,\n            URI,\n            loginOptions,\n          },\n          { token },\n        ),\n      ),\n  ),\n\n  signUpOrIn: withSignValidations(\n    (\n      loginId: string,\n      URI?: string,\n      signUpOptions?: SignUpOptions,\n    ): Promise<SdkResponse<EnchantedLinkResponse>> =>\n      transformResponse(\n        httpClient.post(\n          pathJoin(apiPaths.enchantedLink.signUpOrIn, DeliveryMethods.email),\n          {\n            loginId,\n            URI,\n            loginOptions: signUpOptions,\n          },\n        ),\n      ),\n  ),\n\n  signUp: withSignValidations(\n    (\n      loginId: string,\n      URI?: string,\n      user?: User,\n      signUpOptions?: SignUpOptions,\n    ): Promise<SdkResponse<EnchantedLinkResponse>> =>\n      transformResponse(\n        httpClient.post(\n          pathJoin(apiPaths.enchantedLink.signUp, DeliveryMethods.email),\n          {\n            loginId,\n            URI,\n            user,\n            loginOptions: signUpOptions,\n          },\n        ),\n      ),\n  ),\n\n  waitForSession: withWaitForSessionValidations(\n    (\n      pendingRef: string,\n      config?: WaitForSessionConfig,\n    ): Promise<SdkResponse<JWTResponse>> =>\n      new Promise((resolve) => {\n        const { pollingIntervalMs, timeoutMs } =\n          normalizeWaitForSessionConfig(config);\n        let timeout: NodeJS.Timeout | undefined;\n        const interval = setInterval(async () => {\n          const resp = await httpClient.post(apiPaths.enchantedLink.session, {\n            pendingRef,\n          });\n          if (resp.ok) {\n            clearInterval(interval);\n            if (timeout) clearTimeout(timeout);\n            resolve(transformResponse(Promise.resolve(resp)));\n          }\n        }, pollingIntervalMs);\n\n        timeout = setTimeout(() => {\n          resolve({\n            error: {\n              errorDescription: `Session polling timeout exceeded: ${timeoutMs}ms`,\n              errorCode: '0',\n            },\n            ok: false,\n          });\n          clearInterval(interval);\n        }, timeoutMs);\n      }),\n  ),\n\n  update: {\n    email: withUpdateEmailValidations(\n      <T extends boolean>(\n        loginId: string,\n        email: string,\n        URI?: string,\n        token?: string,\n        updateOptions?: UpdateOptions<T>,\n      ): Promise<SdkResponse<EnchantedLinkResponse>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.enchantedLink.update.email,\n            { loginId, email, URI, ...updateOptions },\n            { token },\n          ),\n        ),\n    ),\n  },\n});\n\nexport default withEnchantedLink;\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { transformResponse } from '../helpers';\nimport { FlowResponse, Options, SdkResponse } from '../types';\nimport { stringNonEmpty, withValidations } from '../validations';\nimport { FlowInput } from './types';\n\nconst withStartValidations = withValidations(stringNonEmpty('flowId'));\nconst withNextValidations = withValidations(\n  stringNonEmpty('executionId'),\n  stringNonEmpty('stepId'),\n  stringNonEmpty('interactionId'),\n);\n\nconst withFlow = (httpClient: HttpClient) => ({\n  start: withStartValidations(\n    (\n      flowId: string,\n      options?: Options,\n      conditionInteractionId?: string,\n      interactionId?: string,\n      componentsVersion?: string,\n      flowVersions?: Record<string, number>,\n      input?: FlowInput,\n    ): Promise<SdkResponse<FlowResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.flow.start, {\n          flowId,\n          options,\n          conditionInteractionId,\n          interactionId,\n          componentsVersion,\n          flowVersions,\n          input,\n        }),\n      ),\n  ),\n  next: withNextValidations(\n    (\n      executionId: string,\n      stepId: string,\n      interactionId: string,\n      version?: number,\n      componentsVersion?: string,\n      input?: FlowInput,\n    ): Promise<SdkResponse<FlowResponse>> => {\n      return transformResponse(\n        httpClient.post(apiPaths.flow.next, {\n          executionId,\n          stepId,\n          interactionId,\n          version,\n          componentsVersion,\n          input,\n        }),\n      );\n    },\n  ),\n});\n\nexport default withFlow;\n","import {\n  stringNonEmpty,\n  withValidations,\n  stringPhone,\n  stringEmail,\n} from '../validations';\n\nexport const loginIdValidations = stringNonEmpty('loginId');\nexport const withVerifyValidations = withValidations(stringNonEmpty('token'));\nexport const withSignValidations = withValidations(loginIdValidations);\nexport const withWaitForSessionValidations = withValidations(\n  stringNonEmpty('pendingRef'),\n);\nexport const withUpdatePhoneValidations = withValidations(\n  loginIdValidations,\n  stringPhone('phone'),\n);\nexport const withUpdateEmailValidations = withValidations(\n  loginIdValidations,\n  stringEmail('email'),\n);\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { pathJoin, transformResponse } from '../helpers';\nimport {\n  DeliveryMethods,\n  DeliveryPhone,\n  SdkResponse,\n  JWTResponse,\n  User,\n  LoginOptions,\n  MaskedEmail,\n  UpdateOptions,\n  SignUpOptions,\n} from '../types';\nimport { MagicLink, Routes } from './types';\nimport {\n  withSignValidations,\n  withVerifyValidations,\n  withUpdateEmailValidations,\n  withUpdatePhoneValidations,\n} from './validations';\n\nconst deliveryMethods = Object.keys(DeliveryMethods).filter(\n  (d) => d !== DeliveryPhone.voice,\n);\n\nconst withMagicLink = (httpClient: HttpClient) => ({\n  verify: withVerifyValidations(\n    (token: string): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(httpClient.post(apiPaths.magicLink.verify, { token })),\n  ),\n\n  signIn: deliveryMethods.reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (\n          loginId: string,\n          URI?: string,\n          loginOptions?: LoginOptions,\n          token?: string,\n        ) =>\n          transformResponse(\n            httpClient.post(\n              pathJoin(apiPaths.magicLink.signIn, delivery),\n              { loginId, URI, loginOptions },\n              { token },\n            ),\n          ),\n      ),\n    }),\n    {},\n  ) as MagicLink[Routes.signIn],\n\n  signUp: deliveryMethods.reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (\n          loginId: string,\n          URI?: string,\n          user?: User,\n          signUpOptions?: SignUpOptions,\n        ) =>\n          transformResponse(\n            httpClient.post(pathJoin(apiPaths.magicLink.signUp, delivery), {\n              loginId,\n              URI,\n              user,\n              loginOptions: signUpOptions,\n            }),\n          ),\n      ),\n    }),\n    {},\n  ) as MagicLink[Routes.signUp],\n\n  signUpOrIn: deliveryMethods.reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (loginId: string, URI?: string, signUpOptions?: SignUpOptions) =>\n          transformResponse(\n            httpClient.post(pathJoin(apiPaths.magicLink.signUpOrIn, delivery), {\n              loginId,\n              URI,\n              loginOptions: signUpOptions,\n            }),\n          ),\n      ),\n    }),\n    {},\n  ) as MagicLink[Routes.signUpOrIn],\n\n  update: {\n    email: withUpdateEmailValidations(\n      <T extends boolean>(\n        loginId: string,\n        email: string,\n        URI?: string,\n        token?: string,\n        updateOptions?: UpdateOptions<T>,\n      ): Promise<SdkResponse<MaskedEmail>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.magicLink.update.email,\n            { loginId, email, URI, ...updateOptions },\n            { token },\n          ),\n        ),\n    ),\n    phone: Object.keys(DeliveryPhone)\n      .filter((d) => d !== DeliveryPhone.voice)\n      .reduce(\n        (acc, delivery) => ({\n          ...acc,\n          [delivery]: withUpdatePhoneValidations(\n            <T extends boolean>(\n              loginId: string,\n              phone: string,\n              URI?: string,\n              token?: string,\n              updateOptions?: UpdateOptions<T>,\n            ) =>\n              transformResponse(\n                httpClient.post(\n                  pathJoin(apiPaths.magicLink.update.phone, delivery),\n                  { loginId, phone, URI, ...updateOptions },\n                  { token },\n                ),\n              ),\n          ),\n        }),\n        {},\n      ) as MagicLink[Routes.updatePhone],\n  },\n});\n\nexport default withMagicLink;\n","import { SdkResponse, URLResponse, JWTResponse, LoginOptions } from '../types';\n\nenum OAuthProviders {\n  facebook = 'facebook',\n  github = 'github',\n  google = 'google',\n  microsoft = 'microsoft',\n  gitlab = 'gitlab',\n  apple = 'apple',\n  discord = 'discord',\n  linkedin = 'linkedin',\n  slack = 'slack',\n}\n\ntype VerifyFn = (code: string) => Promise<SdkResponse<JWTResponse>>;\nexport type StartFn = (\n  redirectURL?: string,\n  loginOptions?: LoginOptions,\n  token?: string,\n) => Promise<SdkResponse<URLResponse>>;\n\nexport type Providers<T> = Record<keyof typeof OAuthProviders, T>;\n\nexport type Oauth = {\n  start: Providers<StartFn>;\n  verify: Providers<VerifyFn>;\n};\n\nexport { OAuthProviders };\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport {\n  SdkResponse,\n  JWTResponse,\n  LoginOptions,\n  ClientIdResponse,\n  VerifyOneTapIDTokenResponse,\n} from '../types';\nimport { transformResponse } from '../helpers';\nimport { Oauth, OAuthProviders } from './types';\nimport { stringNonEmpty, withValidations } from '../validations';\n\nconst withExchangeValidations = withValidations(stringNonEmpty('code'));\nconst withOauth = (httpClient: HttpClient) => ({\n  start: Object.assign(\n    (\n      provider: string,\n      redirectUrl?: string,\n      loginOptions?: LoginOptions,\n      token?: string,\n      loginHint?: string,\n    ) => {\n      return transformResponse(\n        httpClient.post(apiPaths.oauth.start, loginOptions || {}, {\n          queryParams: {\n            provider,\n            ...(redirectUrl && { redirectURL: redirectUrl }),\n            ...(loginHint && { loginHint }),\n          },\n          token,\n        }),\n      );\n    },\n    Object.keys(OAuthProviders).reduce(\n      (acc, provider) => ({\n        ...acc,\n        [provider]: (\n          redirectUrl?: string,\n          loginOptions?: LoginOptions,\n          token?: string,\n          loginHint?: string,\n        ) =>\n          transformResponse(\n            httpClient.post(apiPaths.oauth.start, loginOptions || {}, {\n              queryParams: {\n                provider,\n                ...(redirectUrl && { redirectURL: redirectUrl }),\n                ...(loginHint && { loginHint }),\n              },\n              token,\n            }),\n          ),\n      }),\n      {},\n    ) as Oauth['start'],\n  ),\n  exchange: withExchangeValidations(\n    (code: string): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(httpClient.post(apiPaths.oauth.exchange, { code })),\n  ),\n  startNative: (\n    provider: string,\n    loginOptions?: LoginOptions,\n    implicit?: boolean,\n  ) =>\n    transformResponse(\n      httpClient.post(apiPaths.oauth.startNative, {\n        provider,\n        loginOptions,\n        implicit,\n      }),\n    ),\n  finishNative: (\n    provider: string,\n    stateId: string,\n    user?: string,\n    code?: string,\n    idToken?: string,\n  ) =>\n    transformResponse(\n      httpClient.post(apiPaths.oauth.finishNative, {\n        provider,\n        stateId,\n        user,\n        code,\n        idToken,\n      }),\n    ),\n  getOneTapClientId: (provider: string) =>\n    transformResponse<ClientIdResponse>(\n      httpClient.get(\n        apiPaths.oauth.oneTap.getOneTapClientId.replace('{provider}', provider),\n      ),\n    ),\n  verifyOneTapIDToken: (\n    provider: string,\n    idToken: string,\n    nonce: string,\n    loginOptions?: LoginOptions,\n  ) =>\n    transformResponse<VerifyOneTapIDTokenResponse>(\n      httpClient.post(apiPaths.oauth.oneTap.verifyOneTapIDToken, {\n        provider,\n        idToken,\n        nonce,\n        loginOptions,\n      }),\n    ),\n  exchangeOneTapIDToken: (\n    provider: string,\n    idToken: string,\n    nonce: string,\n    loginOptions?: LoginOptions,\n  ) =>\n    transformResponse<JWTResponse>(\n      httpClient.post(apiPaths.oauth.oneTap.exchangeOneTapIDToken, {\n        provider,\n        idToken,\n        nonce,\n        loginOptions,\n      }),\n    ),\n});\n\nexport default withOauth;\n","import {\n  isStringOrUndefinedValidator,\n  stringNonEmpty,\n  withValidations,\n} from '../validations';\n\nconst appIdValidation = stringNonEmpty('appId');\nexport const withConnectValidations = withValidations(appIdValidation);\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { transformResponse } from '../helpers';\nimport { ConnectOptions } from './types';\nimport { SdkResponse, URLResponse } from '../types';\nimport { withConnectValidations } from './validations';\n\nconst withOutbound = (httpClient: HttpClient) => ({\n  connect: withConnectValidations(\n    (\n      appId: string,\n      options?: ConnectOptions,\n      token?: string,\n    ): Promise<SdkResponse<URLResponse>> => {\n      return transformResponse(\n        httpClient.post(\n          apiPaths.outbound.connect,\n          {\n            appId,\n            options,\n          },\n          {\n            token,\n          },\n        ),\n      );\n    },\n  ),\n});\n\nexport default withOutbound;\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { pathJoin, transformResponse } from '../helpers';\nimport {\n  DeliveryMethods,\n  User,\n  SdkResponse,\n  JWTResponse,\n  DeliveryPhone,\n  LoginOptions,\n  MaskedEmail,\n  UpdateOptions,\n  SignUpOptions,\n} from '../types';\nimport {\n  stringEmail,\n  stringNonEmpty,\n  stringPhone,\n  withValidations,\n} from '../validations';\nimport { Otp, Routes } from './types';\n\nconst loginIdValidations = stringNonEmpty('loginId');\nconst withVerifyValidations = withValidations(\n  loginIdValidations,\n  stringNonEmpty('code'),\n);\nconst withSignValidations = withValidations(loginIdValidations);\nconst withUpdatePhoneValidations = withValidations(\n  loginIdValidations,\n  stringPhone('phone'),\n);\nconst withUpdateEmailValidations = withValidations(\n  loginIdValidations,\n  stringEmail('email'),\n);\n\nconst withOtp = (httpClient: HttpClient) => ({\n  verify: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withVerifyValidations(\n        (loginId: string, code: string): Promise<SdkResponse<JWTResponse>> =>\n          transformResponse(\n            httpClient.post(pathJoin(apiPaths.otp.verify, delivery), {\n              code,\n              loginId,\n            }),\n          ),\n      ),\n    }),\n    {},\n  ) as Otp[Routes.verify],\n\n  signIn: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (loginId: string, loginOptions?: LoginOptions, token?: string) =>\n          transformResponse(\n            httpClient.post(\n              pathJoin(apiPaths.otp.signIn, delivery),\n              { loginId, loginOptions },\n              { token },\n            ),\n          ),\n      ),\n    }),\n    {},\n  ) as Otp[Routes.signIn],\n\n  signUp: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (loginId: string, user?: User, signUpOptions?: SignUpOptions) =>\n          transformResponse(\n            httpClient.post(pathJoin(apiPaths.otp.signUp, delivery), {\n              loginId,\n              user,\n              loginOptions: signUpOptions,\n            }),\n          ),\n      ),\n    }),\n    {},\n  ) as Otp[Routes.signUp],\n\n  signUpOrIn: Object.keys(DeliveryMethods).reduce(\n    (acc, delivery) => ({\n      ...acc,\n      [delivery]: withSignValidations(\n        (loginId: string, signUpOptions?: SignUpOptions) =>\n          transformResponse(\n            httpClient.post(pathJoin(apiPaths.otp.signUpOrIn, delivery), {\n              loginId,\n              loginOptions: signUpOptions,\n            }),\n          ),\n      ),\n    }),\n    {},\n  ) as Otp[Routes.signIn],\n\n  update: {\n    email: withUpdateEmailValidations(\n      <T extends boolean>(\n        loginId: string,\n        email: string,\n        token?: string,\n        updateOptions?: UpdateOptions<T>,\n      ): Promise<SdkResponse<MaskedEmail>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.otp.update.email,\n            { loginId, email, ...updateOptions },\n            { token },\n          ),\n        ),\n    ),\n    phone: Object.keys(DeliveryPhone).reduce(\n      (acc, delivery) => ({\n        ...acc,\n        [delivery]: withUpdatePhoneValidations(\n          <T extends boolean>(\n            loginId: string,\n            phone: string,\n            token?: string,\n            updateOptions?: UpdateOptions<T>,\n          ) =>\n            transformResponse(\n              httpClient.post(\n                pathJoin(apiPaths.otp.update.phone, delivery),\n                { loginId, phone, ...updateOptions },\n                { token },\n              ),\n            ),\n        ),\n      }),\n      {},\n    ) as Otp[Routes.updatePhone],\n  },\n});\n\nexport default withOtp;\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport { transformResponse } from './helpers';\nimport { SdkResponse, URLResponse, JWTResponse, LoginOptions } from './types';\nimport { stringNonEmpty, withValidations } from './validations';\n\nconst withStartValidations = withValidations(stringNonEmpty('tenant'));\nconst withExchangeValidations = withValidations(stringNonEmpty('code'));\n\nconst withSaml = (httpClient: HttpClient) => ({\n  start: withStartValidations(\n    (\n      tenantIdOrEmail: string,\n      redirectUrl?: string,\n      loginOptions?: LoginOptions,\n      token?: string,\n      ssoId?: string,\n    ): Promise<SdkResponse<URLResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.saml.start, loginOptions || {}, {\n          queryParams: {\n            tenant: tenantIdOrEmail,\n            ...(redirectUrl && { redirectURL: redirectUrl }),\n            ...(ssoId && { ssoId }),\n          },\n          ...(token && { token }),\n        }),\n      ),\n  ),\n  exchange: withExchangeValidations(\n    (code: string): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(httpClient.post(apiPaths.saml.exchange, { code })),\n  ),\n});\n\nexport default withSaml;\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport { transformResponse } from './helpers';\nimport {\n  User,\n  SdkResponse,\n  JWTResponse,\n  TOTPResponse,\n  LoginOptions,\n} from './types';\nimport { stringNonEmpty, withValidations } from './validations';\n\nconst loginIdValidations = stringNonEmpty('loginId');\nconst withVerifyValidations = withValidations(\n  loginIdValidations,\n  stringNonEmpty('code'),\n);\nconst withSignUpValidations = withValidations(loginIdValidations);\nconst withUpdateValidations = withValidations(loginIdValidations);\n\nconst withTotp = (httpClient: HttpClient) => ({\n  signUp: withSignUpValidations(\n    (loginId: string, user?: User): Promise<SdkResponse<TOTPResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.totp.signUp, { loginId, user }),\n      ),\n  ),\n\n  verify: withVerifyValidations(\n    (\n      loginId: string,\n      code: string,\n      loginOptions?: LoginOptions,\n      token?: string,\n    ): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(\n        httpClient.post(\n          apiPaths.totp.verify,\n          { loginId, code, loginOptions },\n          { token },\n        ),\n      ),\n  ),\n\n  update: withUpdateValidations(\n    (loginId: string, token?: string): Promise<SdkResponse<TOTPResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.totp.update, { loginId }, { token }),\n      ),\n  ),\n});\n\nexport default withTotp;\n","import { stringNonEmpty, withValidations } from '../validations';\n\nconst loginIdValidation = stringNonEmpty('loginId');\nconst newPasswordValidation = stringNonEmpty('newPassword');\nexport const withSignValidations = withValidations(\n  loginIdValidation,\n  stringNonEmpty('password'),\n);\nexport const withSendResetValidations = withValidations(loginIdValidation);\nexport const withUpdateValidation = withValidations(\n  loginIdValidation,\n  newPasswordValidation,\n);\nexport const withReplaceValidation = withValidations(\n  loginIdValidation,\n  stringNonEmpty('oldPassword'),\n  newPasswordValidation,\n);\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { transformResponse } from '../helpers';\nimport {\n  JWTResponse,\n  LoginOptions,\n  PasswordPolicyResponse,\n  PasswordResetResponse,\n  SdkResponse,\n  SignUpOptions,\n  TemplateOptions,\n  User,\n} from '../types';\nimport {\n  withReplaceValidation,\n  withSendResetValidations,\n  withSignValidations,\n  withUpdateValidation,\n} from './validations';\n\nconst withPassword = (httpClient: HttpClient) => ({\n  signUp: withSignValidations(\n    (\n      loginId: string,\n      password: string,\n      user?: User,\n      signUpOptions?: SignUpOptions,\n    ): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.password.signUp, {\n          loginId,\n          password,\n          user,\n          loginOptions: signUpOptions,\n        }),\n      ),\n  ),\n\n  signIn: withSignValidations(\n    (\n      loginId: string,\n      password: string,\n      loginOptions?: LoginOptions,\n    ): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.password.signIn, {\n          loginId,\n          password,\n          loginOptions,\n        }),\n      ),\n  ),\n\n  sendReset: withSendResetValidations(\n    (\n      loginId: string,\n      redirectUrl?: string,\n      templateOptions?: TemplateOptions,\n    ): Promise<SdkResponse<PasswordResetResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.password.sendReset, {\n          loginId,\n          redirectUrl,\n          templateOptions,\n        }),\n      ),\n  ),\n\n  update: withUpdateValidation(\n    (\n      loginId: string,\n      newPassword: string,\n      token?: string,\n    ): Promise<SdkResponse<never>> =>\n      transformResponse(\n        httpClient.post(\n          apiPaths.password.update,\n          {\n            loginId,\n            newPassword,\n          },\n          { token },\n        ),\n      ),\n  ),\n\n  replace: withReplaceValidation(\n    (\n      loginId: string,\n      oldPassword: string,\n      newPassword: string,\n    ): Promise<SdkResponse<JWTResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.password.replace, {\n          loginId,\n          oldPassword,\n          newPassword,\n        }),\n      ),\n  ),\n\n  policy: (): Promise<SdkResponse<PasswordPolicyResponse>> =>\n    transformResponse(httpClient.get(apiPaths.password.policy)),\n});\n\nexport default withPassword;\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport { transformResponse } from './helpers';\nimport {\n  SdkResponse,\n  ResponseData,\n  LoginOptions,\n  JWTResponse,\n  PasskeyOptions,\n  WebAuthnStartResponse,\n} from './types';\nimport {\n  isStringOrUndefinedValidator,\n  string,\n  stringNonEmpty,\n  withValidations,\n} from './validations';\n\nconst loginIdStringValidations = string('loginId');\nconst loginIdNonEmptyValidations = stringNonEmpty('loginId');\nconst originValidations = stringNonEmpty('origin');\n\nconst withSignUpStartValidations = withValidations(\n  loginIdNonEmptyValidations,\n  originValidations,\n  stringNonEmpty('name'),\n);\nconst withSignUpOrInStartValidations = withValidations(\n  loginIdNonEmptyValidations,\n  originValidations,\n);\nconst withSignInStartValidations = withValidations(\n  loginIdStringValidations,\n  originValidations,\n);\nconst withUpdateStartValidations = withValidations(\n  loginIdNonEmptyValidations,\n  originValidations,\n  isStringOrUndefinedValidator('token'),\n);\nconst withFinishValidations = withValidations(\n  stringNonEmpty('transactionId'),\n  stringNonEmpty('response'),\n);\n\nconst withWebauthn = (httpClient: HttpClient) => ({\n  signUp: {\n    start: withSignUpStartValidations(\n      (\n        loginId: string,\n        origin: string,\n        name: string,\n        passkeyOptions?: PasskeyOptions,\n      ): Promise<SdkResponse<WebAuthnStartResponse>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.signUp.start, {\n            user: {\n              loginId,\n              name,\n            },\n            origin,\n            passkeyOptions,\n          }),\n        ),\n    ),\n\n    finish: withFinishValidations(\n      (\n        transactionId: string,\n        response: string,\n      ): Promise<SdkResponse<JWTResponse>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.signUp.finish, {\n            transactionId,\n            response,\n          }),\n        ),\n    ),\n  },\n\n  signIn: {\n    start: withSignInStartValidations(\n      (\n        loginId: string,\n        origin: string,\n        loginOptions?: LoginOptions,\n        token?: string,\n        passkeyOptions?: PasskeyOptions,\n      ): Promise<SdkResponse<WebAuthnStartResponse>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.webauthn.signIn.start,\n            { loginId, origin, loginOptions, passkeyOptions },\n            { token },\n          ),\n        ),\n    ),\n\n    finish: withFinishValidations(\n      (\n        transactionId: string,\n        response: string,\n      ): Promise<SdkResponse<JWTResponse>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.signIn.finish, {\n            transactionId,\n            response,\n          }),\n        ),\n    ),\n  },\n\n  signUpOrIn: {\n    start: withSignUpOrInStartValidations(\n      (\n        loginId: string,\n        origin: string,\n        passkeyOptions?: PasskeyOptions,\n      ): Promise<SdkResponse<WebAuthnStartResponse>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.signUpOrIn.start, {\n            loginId,\n            origin,\n            passkeyOptions,\n          }),\n        ),\n    ),\n  },\n\n  update: {\n    start: withUpdateStartValidations(\n      (\n        loginId: string,\n        origin: string,\n        token?: string,\n        passkeyOptions?: PasskeyOptions,\n      ): Promise<SdkResponse<WebAuthnStartResponse>> =>\n        transformResponse(\n          httpClient.post(\n            apiPaths.webauthn.update.start,\n            { loginId, origin, passkeyOptions },\n            { token },\n          ),\n        ),\n    ),\n\n    finish: withFinishValidations(\n      (\n        transactionId: string,\n        response: string,\n      ): Promise<SdkResponse<ResponseData>> =>\n        transformResponse(\n          httpClient.post(apiPaths.webauthn.update.finish, {\n            transactionId,\n            response,\n          }),\n        ),\n    ),\n  },\n});\n\nexport default withWebauthn;\n","import { apiPaths } from '../../constants';\nimport { HttpClient } from '../../httpClient';\nimport { normalizeWaitForSessionConfig } from '../../utils';\nimport { transformResponse } from '../helpers';\nimport {\n  JWTResponse,\n  LoginOptions,\n  SdkResponse,\n  SignUpOptions,\n  User,\n  WaitForSessionConfig,\n} from '../types';\nimport { stringNonEmpty, string, withValidations } from '../validations';\nimport { NOTPResponse } from './types';\n\nconst loginIdValidations = string('loginId');\n\nconst withSignValidations = withValidations(loginIdValidations);\n\nconst withWaitForSessionValidations = withValidations(\n  stringNonEmpty('pendingRef'),\n);\n\nconst withNotp = (httpClient: HttpClient) => ({\n  signUpOrIn: withSignValidations(\n    (\n      loginId?: string,\n      signUpOptions?: SignUpOptions,\n    ): Promise<SdkResponse<NOTPResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.notp.signUpOrIn, {\n          loginId,\n          loginOptions: signUpOptions,\n        }),\n      ),\n  ),\n  signUp: withSignValidations(\n    (\n      loginId?: string,\n      user?: User,\n      signUpOptions?: SignUpOptions,\n    ): Promise<SdkResponse<NOTPResponse>> =>\n      transformResponse(\n        httpClient.post(apiPaths.notp.signUp, {\n          loginId,\n          user,\n          loginOptions: signUpOptions,\n        }),\n      ),\n  ),\n  signIn: withSignValidations(\n    (\n      loginId?: string,\n      loginOptions?: LoginOptions,\n      token?: string,\n    ): Promise<SdkResponse<NOTPResponse>> =>\n      transformResponse(\n        httpClient.post(\n          apiPaths.notp.signIn,\n          { loginId, loginOptions },\n          { token },\n        ),\n      ),\n  ),\n  waitForSession: withWaitForSessionValidations(\n    (\n      pendingRef: string,\n      config?: WaitForSessionConfig,\n    ): Promise<SdkResponse<JWTResponse>> =>\n      new Promise((resolve) => {\n        const { pollingIntervalMs, timeoutMs } =\n          normalizeWaitForSessionConfig(config);\n        let timeout: NodeJS.Timeout | undefined;\n        const interval = setInterval(async () => {\n          const resp = await httpClient.post(apiPaths.notp.session, {\n            pendingRef,\n          });\n          if (resp.ok) {\n            clearInterval(interval);\n            if (timeout) clearTimeout(timeout);\n            resolve(transformResponse(Promise.resolve(resp)));\n          }\n        }, pollingIntervalMs);\n\n        timeout = setTimeout(() => {\n          resolve({\n            error: {\n              errorDescription: `Session polling timeout exceeded: ${timeoutMs}ms`,\n              errorCode: '0',\n            },\n            ok: false,\n          });\n          clearInterval(interval);\n        }, timeoutMs);\n      }),\n  ),\n});\n\nexport default withNotp;\n","import { apiPaths } from '../constants';\nimport { HttpClient } from '../httpClient';\nimport withAccessKeys from './accesskey';\nimport withEnchantedLink from './enchantedLink';\nimport withFlow from './flow';\nimport {\n  getTenants,\n  getJwtPermissions,\n  getJwtRoles,\n  getCurrentTenant,\n  isJwtExpired,\n  transformResponse,\n} from './helpers';\nimport withMagicLink from './magicLink';\nimport withOauth from './oauth';\nimport withOutbound from './outbound';\nimport withOtp from './otp';\nimport withSaml from './saml';\nimport withTotp from './totp';\nimport withPassword from './password';\nimport {\n  JWTResponse,\n  TenantsResponse,\n  UserHistoryResponse,\n  UserResponse,\n} from './types';\nimport {\n  stringNonEmpty,\n  withValidations,\n  isStringOrUndefinedValidator,\n} from './validations';\nimport withWebauthn from './webauthn';\nimport {\n  isArrayOrBool,\n  isString,\n  isStringOrUndefined,\n} from './validations/validators';\nimport withNotp from './notp';\n\nconst withJwtValidations = withValidations(stringNonEmpty('token'));\nconst withOptionalTokenValidations = withValidations(\n  isStringOrUndefinedValidator('token'),\n);\n\n/** Returns Descope SDK with all available operations */\nexport default (httpClient: HttpClient) => ({\n  accessKey: withAccessKeys(httpClient),\n  otp: withOtp(httpClient),\n  magicLink: withMagicLink(httpClient),\n  enchantedLink: withEnchantedLink(httpClient),\n  oauth: withOauth(httpClient),\n  outbound: withOutbound(httpClient),\n  saml: withSaml(httpClient),\n  totp: withTotp(httpClient),\n  notp: withNotp(httpClient),\n  webauthn: withWebauthn(httpClient),\n  password: withPassword(httpClient),\n  flow: withFlow(httpClient),\n  /**\n   * Refreshes a session token\n   * Should be called when a session has expired (failed validation) to renew it\n   * @param token A valid refresh token\n   * @param queryParams Additional query parameters to send with the request.\n   *    NOTE - queryParams is used internally and should NOT be used by other consumers, this is subject to change and may be removed in the near future.\n   * @returns The updated authentication info (JWTs)\n   */\n  refresh: withOptionalTokenValidations(\n    (\n      token?: string,\n      queryParams?: { [key: string]: string },\n      externalToken?: string,\n    ) => {\n      const body = {};\n      if (externalToken) {\n        body['externalToken'] = externalToken;\n      }\n      return transformResponse<JWTResponse>(\n        httpClient.post(apiPaths.refresh, body, { token, queryParams }),\n      );\n    },\n  ),\n  /**\n   * Selects a tenant for the current session\n   * @param tenantId The tenant to select\n   * @param token A valid refresh token\n   * @returns The updated authentication info (JWTs). The session token will be updated with the selected tenant under the \"dct\" claim\n   */\n  selectTenant: withValidations(\n    [isString('tenantId')],\n    [isStringOrUndefined('\"token\" must be string or undefined')],\n  )((tenantId: string, token?: string) =>\n    transformResponse<JWTResponse>(\n      httpClient.post(apiPaths.selectTenant, { tenant: tenantId }, { token }),\n    ),\n  ),\n  /**\n   * Logs out the current session\n   * @param token A valid refresh token\n   */\n  logout: withOptionalTokenValidations((token?: string) =>\n    transformResponse<never>(httpClient.post(apiPaths.logout, {}, { token })),\n  ),\n  /**\n   * Logs out all sessions for the current user\n   * @param token A valid refresh token\n   */\n  logoutAll: withOptionalTokenValidations((token?: string) =>\n    transformResponse<never>(\n      httpClient.post(apiPaths.logoutAll, {}, { token }),\n    ),\n  ),\n  /**\n   * Returns the current user details\n   * @param token A valid refresh token\n   * @returns The current user details\n   */\n  me: withOptionalTokenValidations((token?: string) =>\n    transformResponse<UserResponse>(httpClient.get(apiPaths.me, { token })),\n  ),\n  /**\n   * Returns the current user details\n   * @param tenants set to true IFF the response should include only the selected tenant from JWT, or list of tenant ids\n   * @param token A valid refresh token\n   * @returns The current user details\n   */\n  myTenants: withValidations(\n    [isArrayOrBool('\"tenants\" must a string array or a boolean')],\n    [isStringOrUndefined('\"token\" must be string or undefined')],\n  )((tenants: true | string[], token?: string) => {\n    const body = {};\n    if (typeof tenants === 'boolean') {\n      body['dct'] = tenants;\n    } else {\n      body['ids'] = tenants;\n    }\n    return transformResponse<TenantsResponse>(\n      httpClient.post(apiPaths.myTenants, body, { token }),\n    );\n  }),\n  /**\n   * Returns the current user authentication history\n   * @param token A valid refresh token\n   * @returns The current user authentication history\n   */\n  history: withOptionalTokenValidations((token?: string) =>\n    transformResponse<UserHistoryResponse>(\n      httpClient.get(apiPaths.history, { token }),\n    ),\n  ),\n  /**\n   * Checks if the given JWT is still valid but DOES NOT check for signature\n   * @param token A valid token\n   * @returns true if the JWT is expired, false otherwise\n   */\n  isJwtExpired: withJwtValidations(isJwtExpired),\n  /**\n   * Returns the list of tenants in the given JWT but DOES NOT check for signature\n   * @param token A valid token\n   * @returns The list of tenants in the given JWT\n   */\n  getTenants: withJwtValidations(getTenants),\n  /**\n   * Returns the list of permissions granted in the given JWT but DOES NOT check for signature\n   * @param token A valid token\n   * @param tenant The tenant to check permissions for. If not provided, the permissions for the current tenant will be returned\n   * @returns The list of permissions granted in the given JWT\n   */\n  getJwtPermissions: withJwtValidations(getJwtPermissions),\n  /**\n   * Returns the list of roles specified in the given JWT but DOES NOT check for signature\n   * @param token A valid token\n   * @param tenant The tenant to check roles for. If not provided, the roles for the current tenant will be returned\n   * @returns The list of roles specified in the given JWT\n   */\n  getJwtRoles: withJwtValidations(getJwtRoles),\n  /**\n   * Returns Descope current tenant from the given JWT but DOES NOT check for signature\n   * @param token A valid token\n   * @returns The current tenant from the given JWT\n   */\n  getCurrentTenant: withJwtValidations(getCurrentTenant),\n  /**\n   * Parses the given JWT token but DOES NOT check for signature\n   * @param token A valid token\n   * @returns The parsed JWT token\n   */\n  httpClient,\n});\n","import { DEFAULT_BASE_API_URL } from './constants';\nimport createHttpClient from './httpClient';\nimport { AfterRequest, BeforeRequest, Fetch, Hooks } from './httpClient/types';\nimport createSdk from './sdk';\nimport { Logger } from './sdk/types';\nimport { stringNonEmpty, withValidations } from './sdk/validations';\nimport { hasPathValue } from './sdk/validations/validators';\n\ntype SdkConfig = {\n  projectId: string;\n  logger?: Logger;\n  baseUrl?: string;\n  hooks?: Hooks;\n  cookiePolicy?: RequestCredentials | null;\n  baseHeaders?: HeadersInit;\n  refreshCookieName?: string;\n  fetch?: Fetch;\n};\n\n/** Validate we have non-empty project id */\nconst withSdkConfigValidations = withValidations([\n  hasPathValue('projectId', stringNonEmpty('projectId')),\n]);\n\n/** Add the ability to pass multiple hooks instead of one when creating an SDK instance */\nconst withMultipleHooks =\n  <T extends object>(createSdk: (config: SdkConfig) => T) =>\n  (\n    config: Omit<SdkConfig, 'hooks'> & {\n      hooks?: {\n        beforeRequest?: BeforeRequest | BeforeRequest[];\n        afterRequest?: AfterRequest | AfterRequest[];\n        transformResponse?: Hooks['transformResponse'];\n      };\n    },\n  ) => {\n    const beforeRequest: BeforeRequest = (conf) => {\n      // get the before hooks from the config while function is running\n      // because the hooks might change after sdk creation\n      const beforeRequestHooks = [].concat(config.hooks?.beforeRequest || []);\n      return beforeRequestHooks?.reduce((acc, fn) => fn(acc), conf);\n    };\n\n    const afterRequest: AfterRequest = async (req, res) => {\n      // get the after hooks from the config while function is running\n      // because the hooks might change after sdk creation\n      const afterRequestHooks = [].concat(config.hooks?.afterRequest || []);\n      // do not remove this check - on old versions of react-native it is required\n      if (afterRequestHooks.length == 0) return;\n      const results = await Promise.allSettled(\n        afterRequestHooks?.map((fn) => fn(req, res?.clone())),\n      );\n      // eslint-disable-next-line no-console\n      results.forEach(\n        (result) =>\n          result.status === 'rejected' && config.logger?.error(result.reason),\n      );\n    };\n\n    return createSdk({\n      ...config,\n      hooks: {\n        beforeRequest,\n        afterRequest,\n        transformResponse: config.hooks?.transformResponse,\n      },\n    });\n  };\n\n/** Descope SDK client */\nexport default withSdkConfigValidations(\n  withMultipleHooks(\n    ({\n      projectId,\n      logger,\n      baseUrl,\n      hooks,\n      cookiePolicy,\n      baseHeaders = {},\n      refreshCookieName,\n      fetch,\n    }: SdkConfig) =>\n      createSdk(\n        createHttpClient({\n          baseUrl: baseUrl || DEFAULT_BASE_API_URL,\n          projectId,\n          logger,\n          hooks,\n          cookiePolicy,\n          baseConfig: { baseHeaders },\n          refreshCookieName,\n          fetch,\n        }),\n      ),\n  ),\n);\n","import createSdk from './createSdk';\nimport {\n  HTTPMethods,\n  RequestConfig,\n  ExtendedResponse,\n} from './httpClient/types';\nimport { OAuthProviders } from './sdk/oauth/types';\nimport { DeliveryMethods } from './sdk/types';\n\n/** Descope SDK client with delivery methods enum.\n *\n * Please see full documentation at {@link https://docs.descope.com/guides Descope Docs}\n * @example Usage\n *\n * ```js\n * import descopeSdk from '@descope/core-js-sdk';\n *\n * const myProjectId = 'xxx';\n * const sdk = descopeSdk({ projectId: myProjectId });\n *\n * const userLoginId = 'loginId';\n * sdk.otp.signIn.email(userLoginId);\n * const jwtResponse = sdk.otp.verify.email(userIdentifier, codeFromEmail);\n * ```\n */\nexport default Object.assign(createSdk, { DeliveryMethods });\n\nexport { transformResponse } from './sdk/helpers';\nexport type {\n  EnchantedLinkResponse,\n  ExchangeAccessKeyResponse,\n  FlowAction,\n  FlowResponse,\n  FlowStatus,\n  JWTResponse,\n  ResponseData,\n  SdkResponse,\n  TOTPResponse,\n  URLResponse,\n  UserResponse,\n  UserHistoryResponse,\n  LoginOptions,\n  AccessKeyLoginOptions,\n  PasskeyOptions,\n} from './sdk/types';\nexport * from './utils';\nexport { default as HttpStatusCodes } from './constants/httpStatusCodes';\nexport type { SdkFnWrapper } from './utils';\nexport type { HTTPMethods, RequestConfig, ExtendedResponse };\n\n/** Type to restrict to valid delivery methods */\nexport type DeliveryMethod = keyof typeof DeliveryMethods;\n/** Type to restrict to valid OAuth providers */\nexport type OAuthProvider = keyof typeof OAuthProviders;\n","/* eslint-disable import/exports-last */\nimport { ResponseData } from '../../sdk/types';\nimport { SdkFnWrapper, ReplacePaths, SdkFnsPaths } from './types';\n\n/**\n * A wrapper function that allows to wrap multiple Sdk function\n * @param obj: The Sdk instance you want to wrap\n * @param paths: A readonly list of paths of the functions you want to wrap\n * @param wrapper: Your wrapper function, it should gets an Sdk function and return a new Sdk function\n * @returns a mutated instance of the Sdk with updated type definitions based on your wrapper return type\n *\n * Usage example:\n *\n * // Assuming this is our SDK instance\n * const sdk = {\n *    me: (token) => {...}\n *    flow: {\n *       start: (...params) => {...}\n *       next: (...params) => {...}\n *    }\n *    ...\n * }\n *\n * // This is our wrapper\n * const wrapper = (sdkFn) => async (...args) => {\n *    const sdkResponse = await sdkFn(...args)\n *\n *    // Modify return value\n *    return {...sdkResponse, data: {...sdkResponse.data, myCustomAttribute: 'hello'}}\n * }\n *\n * // And those are the paths we want to wrap\n * const paths = ['flow.start', 'flow.next'] as const // You MUST add as const!\n *\n * // We can wrap our SDK functions with the wrapper we created in this way\n * const newlyTypedSdk = wrapWith(sdk, paths, wrapper)\n *\n * Now the 2 wrapped functions will have the updated type based on the wrapper return value\n */\n\nconst wrapWith = <\n  Obj extends object,\n  Paths extends ReadonlyArray<SdkFnsPaths<Obj>>,\n  WrapperData extends ResponseData,\n>(\n  obj: Obj,\n  paths: Paths,\n  wrapper: SdkFnWrapper<WrapperData>,\n): ReplacePaths<Obj, Paths, WrapperData> => {\n  paths.forEach((path) => {\n    const sections = path.split('.');\n    let section = sections.shift();\n    let currentRef: Record<string, any> = obj;\n\n    while (sections.length > 0) {\n      currentRef = currentRef[section];\n\n      if (!section || !currentRef) {\n        throw Error(\n          `Invalid path \"${path}\", \"${section}\" is missing or has no value`,\n        );\n      }\n\n      section = sections.shift();\n    }\n\n    if (typeof currentRef[section] !== 'function') {\n      throw Error(`\"${path}\" is not a function`);\n    }\n    const origFn = currentRef[section];\n    currentRef[section] = wrapper(origFn);\n  });\n\n  return obj as any;\n};\n\nexport default wrapWith;\n"],"names":["apiPaths","accessKey","exchange","otp","verify","signIn","signUp","update","email","phone","signUpOrIn","magicLink","enchantedLink","session","oauth","start","startNative","finishNative","oneTap","getOneTapClientId","exchangeOneTapIDToken","verifyOneTapIDToken","outbound","connect","saml","totp","notp","webauthn","finish","password","sendReset","replace","policy","refresh","selectTenant","logout","logoutAll","me","myTenants","history","flow","next","BASE_URL_REGION_PLACEHOLDER","DEFAULT_BASE_API_URL","MIN_POLLING_INTERVAL_MS","MAX_POLLING_TIMEOUT_MS","DESCOPE_CURRENT_TENANT_CLAIM","httpLogBuilder","msg","headers","headersObj","entries","Object","fromEntries","Headers","JSON","stringify","this","body","Body","url","Url","toString","method","Method","title","Title","status","Status","build","keys","flatMap","key","join","createFetchLogger","logger","receivedFetch","fetchInternal","fetch","async","args","resp","respText","text","Promise","resolve","json","parse","clone","fetchWrapper","warn","Error","log","buildRequestLog","ok","respBody","statusText","buildResponseLog","sessionId","getClientSessionId","currentDate","Date","utcString","getUTCFullYear","getUTCMonth","padStart","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","randomSuffix","Math","floor","random","HTTPMethods","urlBuilder","path","baseUrl","queryParams","projectId","region","slice","forEach","index","encodeURIComponent","length","mergeHeaders","sources","reduce","acc","source","srcArr","Array","isArray","from","getSrcArr","_","value","jsonHeaders","createAuthorizationHeader","token","bearer","Authorization","createDescopeHeaders","refreshCookieName","res","isJson","e","createHttpClient","baseConfig","hooks","cookiePolicy","fetchWithLogger","sendRequest","config","requestConfig","beforeRequest","serializedBody","undefined","serializeBody","requestInit","baseHeaders","credentials","afterRequest","transformResponse","cookies","_a","get","split","cookie","assign","trim","mutableResponse","post","patch","put","delete","buildUrl","HttpStatusCodes","TOO_MANY_REQUESTS","getJwtAuthorizationItems","tenant","claim","claims","parseJwt","tenants","items","jwtDecode","isJwtExpired","exp","getTime","getTenants","getJwtPermissions","getJwtRoles","pathJoin","response","transform","ret","code","data","error","retryAfter","Number","parseInt","getCurrentTenant","createValidator","rule","defaultMsg","val","createOrValidator","validators","errors","filter","validator","createValidation","validate","errMsg","regexMatch","regex","test","validateEmail","validatePhone","validatePathValue","rules","object","pathName","defaultValue","parts","String","m","i","v","isEmail","isPhone","isNotEmpty","min","isString","isBoolean","isUndefined","isStringOrUndefined","isArrayOrBool","withValidations","argsRules","fn","rulesArr","string","fieldName","isStringOrUndefinedValidator","stringNonEmpty","stringEmail","stringPhone","withExchangeValidations","withAccessKeys","httpClient","loginOptions","normalizeWaitForSessionConfig","pollingIntervalMs","timeoutMs","max","DeliveryPhone","DeliveryEmail","DeliveryMethods","FlowStatus","loginIdValidations","withVerifyValidations","withSignValidations","withWaitForSessionValidations","withUpdateEmailValidations","withEnchantedLink","loginId","URI","signUpOptions","user","waitForSession","pendingRef","timeout","interval","setInterval","clearInterval","clearTimeout","setTimeout","errorDescription","errorCode","updateOptions","withStartValidations","withNextValidations","withFlow","flowId","options","conditionInteractionId","interactionId","componentsVersion","flowVersions","input","executionId","stepId","version","withUpdatePhoneValidations","deliveryMethods","d","voice","withMagicLink","delivery","OAuthProviders","withOauth","provider","redirectUrl","loginHint","redirectURL","implicit","stateId","idToken","nonce","appIdValidation","withConnectValidations","withOutbound","appId","withOtp","withSaml","tenantIdOrEmail","ssoId","withSignUpValidations","withUpdateValidations","withTotp","loginIdValidation","newPasswordValidation","withSendResetValidations","withUpdateValidation","withReplaceValidation","withPassword","templateOptions","newPassword","oldPassword","loginIdStringValidations","loginIdNonEmptyValidations","originValidations","withSignUpStartValidations","withSignUpOrInStartValidations","withSignInStartValidations","withUpdateStartValidations","withFinishValidations","withWebauthn","origin","name","passkeyOptions","transactionId","withNotp","withJwtValidations","withOptionalTokenValidations","createSdk","withSdkConfigValidations","conf","beforeRequestHooks","concat","req","afterRequestHooks","allSettled","map","result","reason","withMultipleHooks","externalToken","tenantId","obj","paths","wrapper","sections","section","shift","currentRef","origFn"],"mappings":"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"}