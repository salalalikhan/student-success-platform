"use strict";var e=require("tslib"),t=require("@descope/core-js-sdk"),s=require("jose"),o=require("cross-fetch");function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var a=n(t);var r;null!==(r=globalThis.Headers)&&void 0!==r||(globalThis.Headers=o.Headers);const i=(...e)=>(e.forEach((e=>{var t,s;e&&"object"==typeof e&&(null!==(t=(s=e).highWaterMark)&&void 0!==t||(s.highWaterMark=31457280))})),o.fetch(...e)),p=(e,t)=>{const s=null==e?void 0:e.match(RegExp(`(?:^|;\\s*)${t}=([^;]*)`));return s?s[1]:null},l=t=>async(...s)=>{var o,n,a;const r=await t(...s);if(!r.data)return r;let i=r.data,{refreshJwt:l}=i,m=e.__rest(i,["refreshJwt"]);const d=[];var c;return l?d.push(`${"DSR"}=${l}; Domain=${(null==(c=m)?void 0:c.cookieDomain)||""}; Max-Age=${(null==c?void 0:c.cookieMaxAge)||""}; Path=${(null==c?void 0:c.cookiePath)||"/"}; HttpOnly; SameSite=Strict`):(null===(o=r.response)||void 0===o?void 0:o.headers.get("set-cookie"))&&(l=p(null===(n=r.response)||void 0===n?void 0:n.headers.get("set-cookie"),"DSR"),d.push(null===(a=r.response)||void 0===a?void 0:a.headers.get("set-cookie"))),Object.assign(Object.assign({},r),{data:Object.assign(Object.assign({},r.data),{refreshJwt:l,cookies:d})})};function m(e,t,s){var o,n;const a=s?null===(n=null===(o=e.token.tenants)||void 0===o?void 0:o[s])||void 0===n?void 0:n[t]:e.token[t];return Array.isArray(a)?a:[]}function d(e,t){var s;return!!(null===(s=e.token.tenants)||void 0===s?void 0:s[t])}var c={create:"/v1/mgmt/user/create",createTestUser:"/v1/mgmt/user/create/test",createBatch:"/v1/mgmt/user/create/batch",update:"/v1/mgmt/user/update",patch:"/v1/mgmt/user/patch",delete:"/v1/mgmt/user/delete",deleteAllTestUsers:"/v1/mgmt/user/test/delete/all",load:"/v1/mgmt/user",logout:"/v1/mgmt/user/logout",search:"/v2/mgmt/user/search",searchTestUsers:"/v2/mgmt/user/search/test",getProviderToken:"/v1/mgmt/user/provider/token",updateStatus:"/v1/mgmt/user/update/status",updateLoginId:"/v1/mgmt/user/update/loginid",updateEmail:"/v1/mgmt/user/update/email",updatePhone:"/v1/mgmt/user/update/phone",updateDisplayName:"/v1/mgmt/user/update/name",updatePicture:"/v1/mgmt/user/update/picture",updateCustomAttribute:"/v1/mgmt/user/update/customAttribute",setRole:"/v1/mgmt/user/update/role/set",addRole:"/v2/mgmt/user/update/role/add",removeRole:"/v1/mgmt/user/update/role/remove",setSSOApps:"/v1/mgmt/user/update/ssoapp/set",addSSOApps:"/v1/mgmt/user/update/ssoapp/add",removeSSOApps:"/v1/mgmt/user/update/ssoapp/remove",addTenant:"/v1/mgmt/user/update/tenant/add",removeTenant:"/v1/mgmt/user/update/tenant/remove",setPassword:"/v1/mgmt/user/password/set",setTemporaryPassword:"/v1/mgmt/user/password/set/temporary",setActivePassword:"/v1/mgmt/user/password/set/active",expirePassword:"/v1/mgmt/user/password/expire",removeAllPasskeys:"/v1/mgmt/user/passkeys/delete",removeTOTPSeed:"/v1/mgmt/user/totp/delete",generateOTPForTest:"/v1/mgmt/tests/generate/otp",generateMagicLinkForTest:"/v1/mgmt/tests/generate/magiclink",generateEnchantedLinkForTest:"/v1/mgmt/tests/generate/enchantedlink",generateEmbeddedLink:"/v1/mgmt/user/signin/embeddedlink",generateSignUpEmbeddedLink:"/v1/mgmt/user/signup/embeddedlink",history:"/v1/mgmt/user/history"},g={updateName:"/v1/mgmt/project/update/name",updateTags:"/v1/mgmt/project/update/tags",clone:"/v1/mgmt/project/clone",projectsList:"/v1/mgmt/projects/list",exportSnapshot:"/v1/mgmt/project/snapshot/export",importSnapshot:"/v1/mgmt/project/snapshot/import",validateSnapshot:"/v1/mgmt/project/snapshot/validate"},u={create:"/v1/mgmt/accesskey/create",load:"/v1/mgmt/accesskey",search:"/v1/mgmt/accesskey/search",update:"/v1/mgmt/accesskey/update",deactivate:"/v1/mgmt/accesskey/deactivate",activate:"/v1/mgmt/accesskey/activate",delete:"/v1/mgmt/accesskey/delete"},h={create:"/v1/mgmt/tenant/create",update:"/v1/mgmt/tenant/update",delete:"/v1/mgmt/tenant/delete",load:"/v1/mgmt/tenant",settings:"/v1/mgmt/tenant/settings",loadAll:"/v1/mgmt/tenant/all",searchAll:"/v1/mgmt/tenant/search",generateSSOConfigurationLink:"/v2/mgmt/tenant/adminlinks/sso/generate"},v={oidcCreate:"/v1/mgmt/sso/idp/app/oidc/create",samlCreate:"/v1/mgmt/sso/idp/app/saml/create",oidcUpdate:"/v1/mgmt/sso/idp/app/oidc/update",samlUpdate:"/v1/mgmt/sso/idp/app/saml/update",delete:"/v1/mgmt/sso/idp/app/delete",load:"/v1/mgmt/sso/idp/app/load",loadAll:"/v1/mgmt/sso/idp/apps/load"},f={create:"/v1/mgmt/thirdparty/app/create",update:"/v1/mgmt/thirdparty/app/update",patch:"/v1/mgmt/thirdparty/app/patch",delete:"/v1/mgmt/thirdparty/app/delete",load:"/v1/mgmt/thirdparty/app/load",loadAll:"/v1/mgmt/thirdparty/apps/load",secret:"/v1/mgmt/thirdparty/app/secret",rotate:"/v1/mgmt/thirdparty/app/rotate"},k={delete:"/v1/mgmt/thirdparty/consents/delete",search:"/v1/mgmt/thirdparty/consents/search"},R={create:"/v1/mgmt/outbound/app/create",update:"/v1/mgmt/outbound/app/update",delete:"/v1/mgmt/outbound/app/delete",load:"/v1/mgmt/outbound/app",loadAll:"/v1/mgmt/outbound/apps"},C={settings:"/v1/mgmt/sso/settings",settingsNew:"/v1/mgmt/sso/settings/new",metadata:"/v1/mgmt/sso/metadata",mapping:"/v1/mgmt/sso/mapping",settingsv2:"/v2/mgmt/sso/settings",settingsAllV2:"/v2/mgmt/sso/settings/all",oidc:{configure:"/v1/mgmt/sso/oidc"},saml:{configure:"/v1/mgmt/sso/saml",metadata:"/v1/mgmt/sso/saml/metadata"}},y={update:"/v1/mgmt/jwt/update",impersonate:"/v1/mgmt/impersonate",stopImpersonation:"/v1/mgmt/stop/impersonation",signIn:"/v1/mgmt/auth/signin",signUp:"/v1/mgmt/auth/signup",signUpOrIn:"/v1/mgmt/auth/signup-in",anonymous:"/v1/mgmt/auth/anonymous"},I={settings:"/v1/mgmt/password/settings"},b={create:"/v1/mgmt/permission/create",update:"/v1/mgmt/permission/update",delete:"/v1/mgmt/permission/delete",loadAll:"/v1/mgmt/permission/all"},A={create:"/v1/mgmt/role/create",update:"/v1/mgmt/role/update",delete:"/v1/mgmt/role/delete",loadAll:"/v1/mgmt/role/all",search:"/v1/mgmt/role/search"},S={list:"/v1/mgmt/flow/list",delete:"/v1/mgmt/flow/delete",export:"/v1/mgmt/flow/export",import:"/v1/mgmt/flow/import"},w={export:"/v1/mgmt/theme/export",import:"/v1/mgmt/theme/import"},O={loadAllGroups:"/v1/mgmt/group/all",loadAllGroupsForMember:"/v1/mgmt/group/member/all",loadAllGroupMembers:"/v1/mgmt/group/members"},j={search:"/v1/mgmt/audit/search",createEvent:"/v1/mgmt/audit/event"},T={schemaSave:"/v1/mgmt/authz/schema/save",schemaDelete:"/v1/mgmt/authz/schema/delete",schemaLoad:"/v1/mgmt/authz/schema/load",nsSave:"/v1/mgmt/authz/ns/save",nsDelete:"/v1/mgmt/authz/ns/delete",rdSave:"/v1/mgmt/authz/rd/save",rdDelete:"/v1/mgmt/authz/rd/delete",reCreate:"/v1/mgmt/authz/re/create",reDelete:"/v1/mgmt/authz/re/delete",reDeleteResources:"/v1/mgmt/authz/re/deleteresources",reDeleteResourceRelationsForResources:"/v1/mgmt/authz/re/deleteresourcesrelations",hasRelations:"/v1/mgmt/authz/re/has",who:"/v1/mgmt/authz/re/who",resource:"/v1/mgmt/authz/re/resource",targets:"/v1/mgmt/authz/re/targets",targetAll:"/v1/mgmt/authz/re/targetall",targetWithRelation:"/v1/mgmt/authz/re/targetwithrelation",getModified:"/v1/mgmt/authz/getmodified"},N={schema:"/v1/mgmt/fga/schema",relations:"/v1/mgmt/fga/relations",deleteRelations:"/v1/mgmt/fga/relations/delete",check:"/v1/mgmt/fga/check",resourcesLoad:"/v1/mgmt/fga/resources/load",resourcesSave:"/v1/mgmt/fga/resources/save"};const P=(e,s)=>({create:function(o,n,a,r,i,p,l,m,d,g,u,h,v,f){const k="string"==typeof n?{loginId:o,email:n,phone:a,displayName:r,givenName:u,middleName:h,familyName:v,roleNames:i,userTenants:p,customAttributes:l,picture:m,verifiedEmail:d,verifiedPhone:g,additionalLoginIds:f}:Object.assign(Object.assign({loginId:o},n),{roleNames:null==n?void 0:n.roles,roles:void 0});return t.transformResponse(e.httpClient.post(c.create,k,{token:s}),(e=>e.user))},createTestUser:function(o,n,a,r,i,p,l,m,d,g,u,h,v,f){const k="string"==typeof n?{loginId:o,email:n,phone:a,displayName:r,givenName:u,middleName:h,familyName:v,roleNames:i,userTenants:p,customAttributes:l,picture:m,verifiedEmail:d,verifiedPhone:g,additionalLoginIds:f,test:!0}:Object.assign(Object.assign({loginId:o},n),{roleNames:null==n?void 0:n.roles,roles:void 0,test:!0});return t.transformResponse(e.httpClient.post(c.createTestUser,k,{token:s}),(e=>e.user))},invite:function(o,n,a,r,i,p,l,m,d,g,u,h,v,f,k,R,C,y){const I="string"==typeof n?{loginId:o,email:n,phone:a,displayName:r,givenName:f,middleName:k,familyName:R,roleNames:i,userTenants:p,invite:!0,customAttributes:l,picture:m,verifiedEmail:d,verifiedPhone:g,inviteUrl:u,sendMail:h,sendSMS:v,additionalLoginIds:C,templateId:y}:Object.assign(Object.assign({loginId:o},n),{roleNames:null==n?void 0:n.roles,roles:void 0,invite:!0});return t.transformResponse(e.httpClient.post(c.create,I,{token:s}),(e=>e.user))},inviteBatch:(o,n,a,r,i,p)=>t.transformResponse(e.httpClient.post(c.createBatch,{users:o.map((e=>{const t=Object.assign(Object.assign({},e),{roleNames:e.roles});return delete t.roles,t})),invite:!0,inviteUrl:n,sendMail:a,sendSMS:r,templateOptions:i,templateId:p},{token:s}),(e=>e)),update:function(o,n,a,r,i,p,l,m,d,g,u,h,v,f){const k="string"==typeof n?{loginId:o,email:n,phone:a,displayName:r,givenName:u,middleName:h,familyName:v,roleNames:i,userTenants:p,customAttributes:l,picture:m,verifiedEmail:d,verifiedPhone:g,additionalLoginIds:f}:Object.assign(Object.assign({loginId:o},n),{roleNames:null==n?void 0:n.roles,roles:void 0});return t.transformResponse(e.httpClient.post(c.update,k,{token:s}),(e=>e.user))},patch:function(o,n){const a={loginId:o};return void 0!==n.email&&(a.email=n.email),void 0!==n.phone&&(a.phone=n.phone),void 0!==n.displayName&&(a.displayName=n.displayName),void 0!==n.givenName&&(a.givenName=n.givenName),void 0!==n.middleName&&(a.middleName=n.middleName),void 0!==n.familyName&&(a.familyName=n.familyName),void 0!==n.roles&&(a.roleNames=n.roles),void 0!==n.userTenants&&(a.userTenants=n.userTenants),void 0!==n.customAttributes&&(a.customAttributes=n.customAttributes),void 0!==n.picture&&(a.picture=n.picture),void 0!==n.verifiedEmail&&(a.verifiedEmail=n.verifiedEmail),void 0!==n.verifiedPhone&&(a.verifiedPhone=n.verifiedPhone),void 0!==n.ssoAppIds&&(a.ssoAppIds=n.ssoAppIds),void 0!==n.scim&&(a.scim=n.scim),t.transformResponse(e.httpClient.patch(c.patch,a,{token:s}),(e=>e.user))},delete:o=>t.transformResponse(e.httpClient.post(c.delete,{loginId:o},{token:s})),deleteByUserId:o=>t.transformResponse(e.httpClient.post(c.delete,{userId:o},{token:s})),deleteAllTestUsers:()=>t.transformResponse(e.httpClient.delete(c.deleteAllTestUsers,{token:s})),load:o=>t.transformResponse(e.httpClient.get(c.load,{queryParams:{loginId:o},token:s}),(e=>e.user)),loadByUserId:o=>t.transformResponse(e.httpClient.get(c.load,{queryParams:{userId:o},token:s}),(e=>e.user)),logoutUser:o=>t.transformResponse(e.httpClient.post(c.logout,{loginId:o},{token:s})),logoutUserByUserId:o=>t.transformResponse(e.httpClient.post(c.logout,{userId:o},{token:s})),searchAll:(o,n,a,r,i,p,l,m,d,g)=>t.transformResponse(e.httpClient.post(c.search,{tenantIds:o,roleNames:n,limit:a,page:r,testUsersOnly:i,withTestUser:p,customAttributes:l,statuses:m,emails:d,phones:g},{token:s}),(e=>e.users)),searchTestUsers:o=>t.transformResponse(e.httpClient.post(c.searchTestUsers,Object.assign(Object.assign({},o),{withTestUser:!0,testUsersOnly:!0,roleNames:o.roles,roles:void 0}),{token:s}),(e=>e.users)),search:o=>t.transformResponse(e.httpClient.post(c.search,Object.assign(Object.assign({},o),{roleNames:o.roles,roles:void 0}),{token:s}),(e=>e.users)),getProviderToken:(o,n,a)=>t.transformResponse(e.httpClient.get(c.getProviderToken,{queryParams:{loginId:o,provider:n,withRefreshToken:(null==a?void 0:a.withRefreshToken)?"true":"false",forceRefresh:(null==a?void 0:a.forceRefresh)?"true":"false"},token:s}),(e=>e)),activate:o=>t.transformResponse(e.httpClient.post(c.updateStatus,{loginId:o,status:"enabled"},{token:s}),(e=>e.user)),deactivate:o=>t.transformResponse(e.httpClient.post(c.updateStatus,{loginId:o,status:"disabled"},{token:s}),(e=>e.user)),updateLoginId:(o,n)=>t.transformResponse(e.httpClient.post(c.updateLoginId,{loginId:o,newLoginId:n},{token:s}),(e=>e.user)),updateEmail:(o,n,a)=>t.transformResponse(e.httpClient.post(c.updateEmail,{loginId:o,email:n,verified:a},{token:s}),(e=>e.user)),updatePhone:(o,n,a)=>t.transformResponse(e.httpClient.post(c.updatePhone,{loginId:o,phone:n,verified:a},{token:s}),(e=>e.user)),updateDisplayName:(o,n,a,r,i)=>t.transformResponse(e.httpClient.post(c.updateDisplayName,{loginId:o,displayName:n,givenName:a,middleName:r,familyName:i},{token:s}),(e=>e.user)),updatePicture:(o,n)=>t.transformResponse(e.httpClient.post(c.updatePicture,{loginId:o,picture:n},{token:s}),(e=>e.user)),updateCustomAttribute:(o,n,a)=>t.transformResponse(e.httpClient.post(c.updateCustomAttribute,{loginId:o,attributeKey:n,attributeValue:a},{token:s}),(e=>e.user)),setRoles:(o,n)=>t.transformResponse(e.httpClient.post(c.setRole,{loginId:o,roleNames:n},{token:s}),(e=>e.user)),addRoles:(o,n)=>t.transformResponse(e.httpClient.post(c.addRole,{loginId:o,roleNames:n},{token:s}),(e=>e.user)),removeRoles:(o,n)=>t.transformResponse(e.httpClient.post(c.removeRole,{loginId:o,roleNames:n},{token:s}),(e=>e.user)),addTenant:(o,n)=>t.transformResponse(e.httpClient.post(c.addTenant,{loginId:o,tenantId:n},{token:s}),(e=>e.user)),removeTenant:(o,n)=>t.transformResponse(e.httpClient.post(c.removeTenant,{loginId:o,tenantId:n},{token:s}),(e=>e.user)),setTenantRoles:(o,n,a)=>t.transformResponse(e.httpClient.post(c.setRole,{loginId:o,tenantId:n,roleNames:a},{token:s}),(e=>e.user)),addTenantRoles:(o,n,a)=>t.transformResponse(e.httpClient.post(c.addRole,{loginId:o,tenantId:n,roleNames:a},{token:s}),(e=>e.user)),removeTenantRoles:(o,n,a)=>t.transformResponse(e.httpClient.post(c.removeRole,{loginId:o,tenantId:n,roleNames:a},{token:s}),(e=>e.user)),addSSOapps:(o,n)=>t.transformResponse(e.httpClient.post(c.addSSOApps,{loginId:o,ssoAppIds:n},{token:s}),(e=>e.user)),setSSOapps:(o,n)=>t.transformResponse(e.httpClient.post(c.setSSOApps,{loginId:o,ssoAppIds:n},{token:s}),(e=>e.user)),removeSSOapps:(o,n)=>t.transformResponse(e.httpClient.post(c.removeSSOApps,{loginId:o,ssoAppIds:n},{token:s}),(e=>e.user)),generateOTPForTestUser:(o,n,a)=>t.transformResponse(e.httpClient.post(c.generateOTPForTest,{deliveryMethod:o,loginId:n,loginOptions:a},{token:s}),(e=>e)),generateMagicLinkForTestUser:(o,n,a,r)=>t.transformResponse(e.httpClient.post(c.generateMagicLinkForTest,{deliveryMethod:o,loginId:n,URI:a,loginOptions:r},{token:s}),(e=>e)),generateEnchantedLinkForTestUser:(o,n,a)=>t.transformResponse(e.httpClient.post(c.generateEnchantedLinkForTest,{loginId:o,URI:n,loginOptions:a},{token:s}),(e=>e)),generateEmbeddedLink:(o,n,a)=>t.transformResponse(e.httpClient.post(c.generateEmbeddedLink,{loginId:o,customClaims:n,timeout:a},{token:s}),(e=>e)),generateSignUpEmbeddedLink:(o,n,a,r,i,p)=>t.transformResponse(e.httpClient.post(c.generateSignUpEmbeddedLink,{loginId:o,user:n,emailVerified:a,phoneVerified:r,loginOptions:i,timeout:p},{token:s}),(e=>e)),setTemporaryPassword:(o,n)=>t.transformResponse(e.httpClient.post(c.setTemporaryPassword,{loginId:o,password:n},{token:s}),(e=>e)),setActivePassword:(o,n)=>t.transformResponse(e.httpClient.post(c.setActivePassword,{loginId:o,password:n},{token:s}),(e=>e)),setPassword:(o,n)=>t.transformResponse(e.httpClient.post(c.setPassword,{loginId:o,password:n},{token:s}),(e=>e)),expirePassword:o=>t.transformResponse(e.httpClient.post(c.expirePassword,{loginId:o},{token:s}),(e=>e)),removeAllPasskeys:o=>t.transformResponse(e.httpClient.post(c.removeAllPasskeys,{loginId:o},{token:s}),(e=>e)),removeTOTPSeed:o=>t.transformResponse(e.httpClient.post(c.removeTOTPSeed,{loginId:o},{token:s}),(e=>e)),history:o=>t.transformResponse(e.httpClient.post(c.history,o,{token:s}),(e=>e))}),E=(e,s)=>({updateName:o=>t.transformResponse(e.httpClient.post(g.updateName,{name:o},{token:s})),updateTags:o=>t.transformResponse(e.httpClient.post(g.updateTags,{tags:o},{token:s})),clone:(o,n,a)=>t.transformResponse(e.httpClient.post(g.clone,{name:o,environment:n,tags:a},{token:s})),listProjects:async()=>t.transformResponse(e.httpClient.post(g.projectsList,{},{token:s}),(e=>e.projects.map((({id:e,name:t,environment:s,tags:o})=>({id:e,name:t,environment:s,tags:o}))))),exportSnapshot:()=>t.transformResponse(e.httpClient.post(g.exportSnapshot,{},{token:s})),importSnapshot:o=>t.transformResponse(e.httpClient.post(g.importSnapshot,o,{token:s})),validateSnapshot:o=>t.transformResponse(e.httpClient.post(g.validateSnapshot,o,{token:s})),export:()=>t.transformResponse(e.httpClient.post(g.exportSnapshot,{},{token:s}),(e=>e.files)),import:o=>t.transformResponse(e.httpClient.post(g.importSnapshot,{files:o},{token:s}))}),M=(e,s)=>({create:(o,n,a,r,i)=>t.transformResponse(e.httpClient.post(h.create,{name:o,selfProvisioningDomains:n,customAttributes:a,enforceSSO:r,disabled:i},{token:s})),createWithId:(o,n,a,r,i,p)=>t.transformResponse(e.httpClient.post(h.create,{id:o,name:n,selfProvisioningDomains:a,customAttributes:r,enforceSSO:i,disabled:p},{token:s})),update:(o,n,a,r,i,p)=>t.transformResponse(e.httpClient.post(h.update,{id:o,name:n,selfProvisioningDomains:a,customAttributes:r,enforceSSO:i,disabled:p},{token:s})),delete:(o,n)=>t.transformResponse(e.httpClient.post(h.delete,{id:o,cascade:n},{token:s})),load:o=>t.transformResponse(e.httpClient.get(h.load,{queryParams:{id:o},token:s}),(e=>e)),loadAll:()=>t.transformResponse(e.httpClient.get(h.loadAll,{token:s}),(e=>e.tenants)),searchAll:(o,n,a,r)=>t.transformResponse(e.httpClient.post(h.searchAll,{tenantIds:o,tenantNames:n,tenantSelfProvisioningDomains:a,customAttributes:r},{token:s}),(e=>e.tenants)),getSettings:o=>t.transformResponse(e.httpClient.get(h.settings,{queryParams:{id:o},token:s}),(e=>e)),configureSettings:(o,n)=>t.transformResponse(e.httpClient.post(h.settings,Object.assign(Object.assign({},n),{tenantId:o}),{token:s})),generateSSOConfigurationLink:(o,n,a,r,i)=>t.transformResponse(e.httpClient.post(h.generateSSOConfigurationLink,{tenantId:o,expireTime:n,ssoId:a,email:r,templateId:i},{token:s}),(e=>e))}),U=(e,s)=>({update:(o,n,a)=>t.transformResponse(e.httpClient.post(y.update,{jwt:o,customClaims:n,refreshDuration:a},{token:s})),impersonate:(o,n,a,r,i,p)=>t.transformResponse(e.httpClient.post(y.impersonate,{impersonatorId:o,loginId:n,validateConsent:a,customClaims:r,selectedTenant:i,refreshDuration:p},{token:s})),stopImpersonation:(o,n,a,r)=>t.transformResponse(e.httpClient.post(y.stopImpersonation,{jwt:o,customClaims:n,selectedTenant:a,refreshDuration:r},{token:s})),signIn:(o,n)=>t.transformResponse(e.httpClient.post(y.signIn,Object.assign({loginId:o},n),{token:s})),signUp:(o,n,a)=>t.transformResponse(e.httpClient.post(y.signUp,Object.assign({loginId:o,user:n},a),{token:s})),signUpOrIn:(o,n,a)=>t.transformResponse(e.httpClient.post(y.signUpOrIn,Object.assign({loginId:o,user:n},a),{token:s})),anonymous:(o,n,a)=>t.transformResponse(e.httpClient.post(y.anonymous,{customClaims:o,selectedTenant:n,refreshDuration:a},{token:s}))}),x=(e,s)=>({create:(o,n)=>t.transformResponse(e.httpClient.post(b.create,{name:o,description:n},{token:s})),update:(o,n,a)=>t.transformResponse(e.httpClient.post(b.update,{name:o,newName:n,description:a},{token:s})),delete:o=>t.transformResponse(e.httpClient.post(b.delete,{name:o},{token:s})),loadAll:()=>t.transformResponse(e.httpClient.get(b.loadAll,{token:s}),(e=>e.permissions))}),D=(e,s)=>({create:(o,n,a,r,i)=>t.transformResponse(e.httpClient.post(A.create,{name:o,description:n,permissionNames:a,tenantId:r,default:i},{token:s})),update:(o,n,a,r,i,p)=>t.transformResponse(e.httpClient.post(A.update,{name:o,newName:n,description:a,permissionNames:r,tenantId:i,default:p},{token:s})),delete:(o,n)=>t.transformResponse(e.httpClient.post(A.delete,{name:o,tenantId:n},{token:s})),loadAll:()=>t.transformResponse(e.httpClient.get(A.loadAll,{token:s}),(e=>e.roles)),search:o=>t.transformResponse(e.httpClient.post(A.search,o,{token:s}),(e=>e.roles))}),L=(e,s)=>({loadAllGroups:o=>t.transformResponse(e.httpClient.post(O.loadAllGroups,{tenantId:o},{token:s})),loadAllGroupsForMember:(o,n,a)=>t.transformResponse(e.httpClient.post(O.loadAllGroupsForMember,{tenantId:o,loginIds:a,userIds:n},{token:s})),loadAllGroupMembers:(o,n)=>t.transformResponse(e.httpClient.post(O.loadAllGroupMembers,{tenantId:o,groupId:n},{token:s}))});function F(e){var t,s;const o=e;return o.oidc&&(o.oidc=Object.assign(Object.assign({},o.oidc),{attributeMapping:o.oidc.userAttrMapping}),delete o.oidc.userAttrMapping),(null===(t=o.saml)||void 0===t?void 0:t.groupsMapping)&&(o.saml.groupsMapping=null===(s=o.saml)||void 0===s?void 0:s.groupsMapping.map((e=>{const t=e;return t.roleName=t.role.name,delete t.role,t}))),o}const q=(e,s)=>({getSettings:o=>t.transformResponse(e.httpClient.get(C.settings,{queryParams:{tenantId:o},token:s}),(e=>e)),newSettings:(o,n,a)=>t.transformResponse(e.httpClient.post(C.settingsNew,Object.assign(Object.assign({tenantId:o},n?{ssoId:n}:{}),{displayName:a}),{token:s}),(e=>F(e))),deleteSettings:(o,n)=>t.transformResponse(e.httpClient.delete(C.settings,{queryParams:Object.assign({tenantId:o},n?{ssoId:n}:{}),token:s})),configureSettings:(o,n,a,r,i,p)=>t.transformResponse(e.httpClient.post(C.settings,{tenantId:o,idpURL:n,entityId:r,idpCert:a,redirectURL:i,domains:p},{token:s})),configureMetadata:(o,n,a,r)=>t.transformResponse(e.httpClient.post(C.metadata,{tenantId:o,idpMetadataURL:n,redirectURL:a,domains:r},{token:s})),configureMapping:(o,n,a)=>t.transformResponse(e.httpClient.post(C.mapping,{tenantId:o,roleMappings:n,attributeMapping:a},{token:s})),configureOIDCSettings:(o,n,a,r)=>{const i=Object.assign(Object.assign({},n),{userAttrMapping:n.attributeMapping});return delete i.attributeMapping,t.transformResponse(e.httpClient.post(C.oidc.configure,Object.assign({tenantId:o,settings:i,domains:a},r?{ssoId:r}:{}),{token:s}))},configureSAMLSettings:(o,n,a,r,i)=>t.transformResponse(e.httpClient.post(C.saml.configure,Object.assign({tenantId:o,settings:n,redirectUrl:a,domains:r},i?{ssoId:i}:{}),{token:s})),configureSAMLByMetadata:(o,n,a,r,i)=>t.transformResponse(e.httpClient.post(C.saml.metadata,Object.assign({tenantId:o,settings:n,redirectUrl:a,domains:r},i?{ssoId:i}:{}),{token:s})),loadSettings:(o,n)=>t.transformResponse(e.httpClient.get(C.settingsv2,{queryParams:Object.assign({tenantId:o},n?{ssoId:n}:{}),token:s}),(e=>F(e))),loadAllSettings:o=>t.transformResponse(e.httpClient.get(C.settingsAllV2,{queryParams:{tenantId:o},token:s}),(e=>function(e){const t=e.SSOSettings,s=[];return t.forEach((e=>s.push(F(e)))),s}(e)))}),z=(e,s)=>({create:(o,n,a,r,i,p,l,m)=>t.transformResponse(e.httpClient.post(u.create,{name:o,expireTime:n,roleNames:a,keyTenants:r,userId:i,customClaims:p,description:l,permittedIps:m},{token:s})),load:o=>t.transformResponse(e.httpClient.get(u.load,{queryParams:{id:o},token:s}),(e=>e.key)),searchAll:o=>t.transformResponse(e.httpClient.post(u.search,{tenantIds:o},{token:s}),(e=>e.keys)),update:(o,n,a,r,i,p,l)=>t.transformResponse(e.httpClient.post(u.update,{id:o,name:n,description:a,roleNames:r,keyTenants:i,customClaims:p,permittedIps:l},{token:s}),(e=>e.key)),deactivate:o=>t.transformResponse(e.httpClient.post(u.deactivate,{id:o},{token:s})),activate:o=>t.transformResponse(e.httpClient.post(u.activate,{id:o},{token:s})),delete:o=>t.transformResponse(e.httpClient.post(u.delete,{id:o},{token:s}))}),J=(e,s)=>({list:()=>t.transformResponse(e.httpClient.post(S.list,{},{token:s})),delete:o=>t.transformResponse(e.httpClient.post(S.delete,{ids:o},{token:s})),export:o=>t.transformResponse(e.httpClient.post(S.export,{flowId:o},{token:s})),import:(o,n,a)=>t.transformResponse(e.httpClient.post(S.import,{flowId:o,flow:n,screens:a},{token:s}))}),$=(e,s)=>({export:()=>t.transformResponse(e.httpClient.post(w.export,{},{token:s})),import:o=>t.transformResponse(e.httpClient.post(w.import,{theme:o},{token:s}))}),K=(e,s)=>({search:o=>{const n=Object.assign(Object.assign({},o),{externalIds:o.loginIds});return delete n.loginIds,t.transformResponse(e.httpClient.post(j.search,n,{token:s}),(e=>null==e?void 0:e.audits.map((e=>{const t=Object.assign(Object.assign({},e),{occurred:parseFloat(e.occurred),loginIds:e.externalIds});return delete t.externalIds,t}))))},createEvent:o=>{const n=Object.assign({},o);return t.transformResponse(e.httpClient.post(j.createEvent,n,{token:s}))}}),W=(e,s)=>({saveSchema:(o,n)=>t.transformResponse(e.httpClient.post(T.schemaSave,{schema:o,upgrade:n},{token:s})),deleteSchema:()=>t.transformResponse(e.httpClient.post(T.schemaDelete,{},{token:s})),loadSchema:()=>t.transformResponse(e.httpClient.post(T.schemaLoad,{},{token:s}),(e=>e.schema)),saveNamespace:(o,n,a)=>t.transformResponse(e.httpClient.post(T.nsSave,{namespace:o,oldName:n,schemaName:a},{token:s})),deleteNamespace:(o,n)=>t.transformResponse(e.httpClient.post(T.nsDelete,{name:o,schemaName:n},{token:s})),saveRelationDefinition:(o,n,a,r)=>t.transformResponse(e.httpClient.post(T.rdSave,{relationDefinition:o,namespace:n,oldName:a,schemaName:r},{token:s})),deleteRelationDefinition:(o,n,a)=>t.transformResponse(e.httpClient.post(T.rdDelete,{name:o,namespace:n,schemaName:a},{token:s})),createRelations:o=>t.transformResponse(e.httpClient.post(T.reCreate,{relations:o},{token:s})),deleteRelations:o=>t.transformResponse(e.httpClient.post(T.reDelete,{relations:o},{token:s})),deleteRelationsForResources:o=>t.transformResponse(e.httpClient.post(T.reDeleteResources,{resources:o},{token:s})),deleteResourceRelationsForResources:o=>t.transformResponse(e.httpClient.post(T.reDeleteResourceRelationsForResources,{resources:o},{token:s})),deleteRelationsForIds:o=>t.transformResponse(e.httpClient.post(T.reDeleteResources,{resources:o},{token:s})),hasRelations:o=>t.transformResponse(e.httpClient.post(T.hasRelations,{relationQueries:o},{token:s}),(e=>e.relationQueries)),whoCanAccess:(o,n,a)=>t.transformResponse(e.httpClient.post(T.who,{resource:o,relationDefinition:n,namespace:a},{token:s}),(e=>e.targets)),resourceRelations:(o,n=!1)=>t.transformResponse(e.httpClient.post(T.resource,{resource:o,ignoreTargetSetRelations:n},{token:s}),(e=>e.relations)),targetsRelations:(o,n=!1)=>t.transformResponse(e.httpClient.post(T.targets,{targets:o,includeTargetSetRelations:n},{token:s}),(e=>e.relations)),whatCanTargetAccess:o=>t.transformResponse(e.httpClient.post(T.targetAll,{target:o},{token:s}),(e=>e.relations)),whatCanTargetAccessWithRelation:(o,n,a)=>t.transformResponse(e.httpClient.post(T.targetWithRelation,{target:o,relationDefinition:n,namespace:a},{token:s}),(e=>e.resources.map((e=>({resource:e}))))),getModified:o=>t.transformResponse(e.httpClient.post(T.getModified,{since:o?o.getTime():0},{token:s}),(e=>e))}),G=(e,s)=>({createOidcApplication:o=>{var n;return t.transformResponse(e.httpClient.post(v.oidcCreate,Object.assign(Object.assign({},o),{enabled:null===(n=o.enabled)||void 0===n||n}),{token:s}))},createSamlApplication:o=>{var n;return t.transformResponse(e.httpClient.post(v.samlCreate,Object.assign(Object.assign({},o),{enabled:null===(n=o.enabled)||void 0===n||n}),{token:s}))},updateOidcApplication:o=>t.transformResponse(e.httpClient.post(v.oidcUpdate,Object.assign({},o),{token:s})),updateSamlApplication:o=>t.transformResponse(e.httpClient.post(v.samlUpdate,Object.assign({},o),{token:s})),delete:o=>t.transformResponse(e.httpClient.post(v.delete,{id:o},{token:s})),load:o=>t.transformResponse(e.httpClient.get(v.load,{queryParams:{id:o},token:s}),(e=>e)),loadAll:()=>t.transformResponse(e.httpClient.get(v.loadAll,{token:s}),(e=>e.apps))}),B=(e,s)=>({getSettings:o=>t.transformResponse(e.httpClient.get(I.settings,{queryParams:{tenantId:o},token:s}),(e=>e)),configureSettings:(o,n)=>t.transformResponse(e.httpClient.post(I.settings,Object.assign(Object.assign({},n),{tenantId:o}),{token:s}))}),V=(e,s)=>({saveSchema:o=>t.transformResponse(e.httpClient.post(N.schema,o,{token:s})),deleteSchema:()=>t.transformResponse(e.httpClient.post(T.schemaDelete,{},{token:s})),createRelations:o=>t.transformResponse(e.httpClient.post(N.relations,{tuples:o},{token:s})),deleteRelations:o=>t.transformResponse(e.httpClient.post(N.deleteRelations,{tuples:o},{token:s})),check:o=>t.transformResponse(e.httpClient.post(N.check,{tuples:o},{token:s}),(e=>e.tuples)),loadResourcesDetails:o=>t.transformResponse(e.httpClient.post(N.resourcesLoad,{resourceIdentifiers:o},{token:s}),(e=>e.resourcesDetails)),saveResourcesDetails:o=>t.transformResponse(e.httpClient.post(N.resourcesSave,{resourcesDetails:o},{token:s})),deleteAllRelations:()=>t.transformResponse(e.httpClient.delete(N.relations,{token:s}))}),H=(e,s)=>({createApplication:o=>t.transformResponse(e.httpClient.post(f.create,Object.assign({},o),{token:s})),updateApplication:o=>t.transformResponse(e.httpClient.post(f.update,Object.assign({},o),{token:s})),patchApplication:o=>t.transformResponse(e.httpClient.post(f.patch,Object.assign({},o),{token:s})),deleteApplication:o=>t.transformResponse(e.httpClient.post(f.delete,{id:o},{token:s})),loadApplication:o=>t.transformResponse(e.httpClient.get(f.load,{queryParams:{id:o},token:s}),(e=>e)),loadAllApplications:()=>t.transformResponse(e.httpClient.get(f.loadAll,{token:s}),(e=>e.apps)),getApplicationSecret:o=>t.transformResponse(e.httpClient.get(f.secret,{queryParams:{id:o},token:s}),(e=>e)),rotateApplicationSecret:o=>t.transformResponse(e.httpClient.post(f.rotate,{id:o},{token:s})),searchConsents:o=>t.transformResponse(e.httpClient.post(k.search,Object.assign({},o),{token:s}),(e=>e.consents)),deleteConsents:o=>t.transformResponse(e.httpClient.post(k.delete,Object.assign({},o),{token:s}))}),_=(e,s)=>({createApplication:o=>t.transformResponse(e.httpClient.post(R.create,Object.assign({},o),{token:s}),(e=>e.app)),updateApplication:o=>t.transformResponse(e.httpClient.post(R.update,{app:o},{token:s}),(e=>e.app)),deleteApplication:o=>t.transformResponse(e.httpClient.post(R.delete,{id:o},{token:s})),loadApplication:o=>t.transformResponse(e.httpClient.get(`${R.load}/${o}`,{token:s}),(e=>e.app)),loadAllApplications:()=>t.transformResponse(e.httpClient.get(R.loadAll,{token:s}),(e=>e.apps))});const Q=o=>{var n,{managementKey:r,publicKey:c}=o,g=e.__rest(o,["managementKey","publicKey"]);const u=a.default(Object.assign(Object.assign({fetch:i},g),{baseHeaders:Object.assign(Object.assign({},g.baseHeaders),{"x-descope-sdk-name":"nodejs","x-descope-sdk-node-version":(null===(n=null===process||void 0===process?void 0:process.versions)||void 0===n?void 0:n.node)||"","x-descope-sdk-version":"1.7.8"})})),{projectId:h,logger:v}=g,f={},k=((e,t)=>({user:P(e,t),project:E(e,t),accessKey:z(e,t),tenant:M(e,t),ssoApplication:G(e,t),inboundApplication:H(e,t),outboundApplication:_(e,t),sso:q(e,t),jwt:U(e,t),permission:x(e,t),password:B(e,t),role:D(e,t),group:L(e,t),flow:J(e,t),theme:$(e,t),audit:K(e,t),authz:W(e,t),fga:V(e,t)}))(u,r),R=Object.assign(Object.assign({},u),{refresh:async e=>u.refresh(e),management:k,async getKey(e){if(!(null==e?void 0:e.kid))throw Error("header.kid must not be empty");if(f[e.kid])return f[e.kid];if(Object.assign(f,await(async()=>{if(c)try{const e=JSON.parse(c),t=await s.importJWK(e);return{[e.kid]:t}}catch(e){throw null==v||v.error("Failed to parse the provided public key",e),new Error(`Failed to parse public key. Error: ${e}`)}const e=(await u.httpClient.get(`v2/keys/${h}`).then((e=>e.json()))).keys;return Array.isArray(e)?(await Promise.all(e.map((async e=>[e.kid,await s.importJWK(e)])))).reduce(((e,[t,s])=>t?Object.assign(Object.assign({},e),{[t.toString()]:s}):e),{}):{}})()),!f[e.kid])throw Error("failed to fetch matching key");return f[e.kid]},async validateJwt(e){var t;const o=(await s.jwtVerify(e,R.getKey,{clockTolerance:5})).payload;if(o&&(o.iss=null===(t=o.iss)||void 0===t?void 0:t.split("/").pop(),o.iss!==h))throw new s.errors.JWTClaimValidationFailed('unexpected "iss" claim value',"iss","check_failed");return{jwt:e,token:o}},async validateSession(e){if(!e)throw Error("session token is required for validation");try{return await R.validateJwt(e)}catch(e){throw null==v||v.error("session validation failed",e),Error(`session validation failed. Error: ${e}`)}},async refreshSession(e){var t,s,o,n,a,r;if(!e)throw Error("refresh token is required to refresh a session");try{await R.validateJwt(e);const i=await R.refresh(e);if(i.ok){const e=p(null===(s=null===(t=i.data)||void 0===t?void 0:t.cookies)||void 0===s?void 0:s.join(";"),"DS")||(null===(o=i.data)||void 0===o?void 0:o.sessionJwt),r=await R.validateJwt(e);return r.cookies=(null===(n=i.data)||void 0===n?void 0:n.cookies)||[],(null===(a=i.data)||void 0===a?void 0:a.refreshJwt)&&(r.refreshJwt=i.data.refreshJwt),r}throw Error(null===(r=i.error)||void 0===r?void 0:r.errorMessage)}catch(e){throw null==v||v.error("refresh token validation failed",e),Error(`refresh token validation failed, Error: ${e}`)}},async validateAndRefreshSession(e,t){if(!e&&!t)throw Error("both session and refresh tokens are empty");try{return await R.validateSession(e)}catch(e){null==v||v.log(`session validation failed with error ${e} - trying to refresh it`)}return R.refreshSession(t)},async exchangeAccessKey(e,t){var s;if(!e)throw Error("access key must not be empty");let o;try{o=await R.accessKey.exchange(e,t)}catch(e){throw null==v||v.error("failed to exchange access key",e),Error(`could not exchange access key - Failed to exchange. Error: ${e}`)}if(!o.ok)throw null==v||v.error("failed to exchange access key",o.error),Error(`could not exchange access key - ${null===(s=o.error)||void 0===s?void 0:s.errorMessage}`);const{sessionJwt:n}=o.data;if(!n)throw null==v||v.error("failed to parse exchange access key response"),Error("could not exchange access key");try{return await R.validateJwt(n)}catch(e){throw null==v||v.error("failed to parse jwt from access key",e),Error(`could not exchange access key - failed to validate jwt. Error: ${e}`)}},validatePermissions:(e,t)=>R.validateTenantPermissions(e,"",t),getMatchedPermissions:(e,t)=>R.getMatchedTenantPermissions(e,"",t),validateTenantPermissions(e,t,s){if(t&&!d(e,t))return!1;const o=m(e,"permissions",t);return s.every((e=>o.includes(e)))},getMatchedTenantPermissions(e,t,s){if(t&&!d(e,t))return[];const o=m(e,"permissions",t);return s.filter((e=>o.includes(e)))},validateRoles:(e,t)=>R.validateTenantRoles(e,"",t),getMatchedRoles:(e,t)=>R.getMatchedTenantRoles(e,"",t),validateTenantRoles(e,t,s){if(t&&!d(e,t))return!1;const o=m(e,"roles",t);return s.every((e=>o.includes(e)))},getMatchedTenantRoles(e,t,s){if(t&&!d(e,t))return[];const o=m(e,"roles",t);return s.filter((e=>o.includes(e)))}});return t.wrapWith(R,["otp.verify.email","otp.verify.sms","otp.verify.voice","otp.verify.whatsapp","magicLink.verify","enchantedLink.signUp","enchantedLink.signIn","oauth.exchange","saml.exchange","totp.verify","webauthn.signIn.finish","webauthn.signUp.finish","refresh"],l)};Q.RefreshTokenCookieName="DSR",Q.SessionTokenCookieName="DS",Q.DescopeErrors={badRequest:"E011001",missingArguments:"E011002",invalidRequest:"E011003",invalidArguments:"E011004",wrongOTPCode:"E061102",tooManyOTPAttempts:"E061103",enchantedLinkPending:"E062503",userNotFound:"E062108"},module.exports=Q;
//# sourceMappingURL=index.cjs.js.map
